
分 类 号   TP391.9                           密级                






基于Unity3D的虚拟养殖系统的设计与实现





研  究  生  姓 名： 张古泰 
指导教师姓名、职称 ：朱文球 教授
学   科   专   业 ：计算机技术 
研   究   方   向 ：虚拟仿真 







湖 南 工 业 大 学
二〇一八年 六 月 二 日



分 类 号   TP391.9                           密级                





基于Unity3D的虚拟养殖系统的设计与实现
The design and implementation of virtual farming system based on Unity3D   


研  究  生  姓 名： 张古泰 
指导教师姓名、职称： 朱文球 教授 
学   科   专   业： 计算机技术 
研   究   方   向： 虚拟仿真    


论文答辩日期                答辩委员会主席           


湖 南 工 业 大 学
二〇一八年 六 月 二 日


湖南工业大学学位论文原创性声明

本人郑重声明：所呈交的学位论文，是本人在导师的指导下，独立进行研究工作所取得的成果。除文中已经注明引用的内容外，本论文不含任何其他个人或集体已经发表或撰写过的作品成果。对本文的研究做出重要贡献的个人和集体，均已在文中以明确方式标明。本人完全意识到本声明的法律结果由本人承担。

作者签名：					日期：   年    月    日


湖南工业大学论文版权使用授权书

本人了解湖南工业大学有关保留、使用学位论文的规定，即：学校有权保留学位论文，允许学位论文被查阅和借阅；学校可以公布学位论文的全部或部分内容，可以采用复印、缩印或其他手段保存学位论文；学校可根据国家或湖南省有关部门规定送交学位论文。


作者签名：		 导师签名：			日期：   年    月    日




摘　要

随着虚拟仿真技术的飞速发展，虚拟仿真技术在各行各业得以广泛应用，其中就包括了虚拟教育培训行业的兴起。论文以虚拟饲养行业为契机，通过对现实中饲养过程的虚拟仿真，设计实现虚拟养殖系统，为用户提供一种全新的饲养员培训教育模式。
在传统的饲养行业中，专业饲养员的培训是艰难而繁琐的。一个饲养员在培训过程中，往往只能通过文字材料和视频资料去学习和掌握相应的培训技能，却无法亲身体验到完整的饲养过程。但利用虚拟现实技术，则可以突破这层限制，使得饲养员能置身于虚拟的饲养场景中，看到整个养殖场的详细情况，用户可以模拟成一个真正的饲养员，体验一整套完整的饲养过程。虚拟养殖系统就是为了完成了这样的功能而设计的。
论文从国内外先进的虚拟仿真技术成果入手，对系统进行了可行性分析、需求分析。根据现实养殖的操作流程设计了整个虚拟养殖系统的框架和实现方式。根据系统的设计框架，对整个系统进行分解，将系统划分为日常饲养模块、流程模块以及数据存储模块。最终根据每个模块的功能和特点分别进行了设计与实现。
虚拟养殖系统不仅给饲养员的培训带来了一种崭新的操作体验，更重要的是，将整个饲养过程中需要掌握的知识技能融入到系统中，让实习饲养员通过该系统能够迅速地融入到真实的养殖饲养过程中。同时也对人们了解养殖流程提供了一个良好的窗口。
在以往的虚拟仿真系统中，只是简单的将文字资料和视频资料进行整合，以3D的形式展示给用户。但是在本系统中，将知识点的学习与虚拟仿真技术相融合，运用游戏化的形式实现虚拟养殖环节，运用流程操作形式带领用户进行实验检测操作。

关键词： 虚拟仿真，虚拟养殖，虚拟培训，Unity3D


ABSTRACT

With the rapid development of virtual simulation technology, virtual simulation technology has been widely applied in all walks of life, including the rise of the virtual education and training industry. This article takes the virtual breeding industry as an opportunity to design and implement a virtual farming system through virtual simulation of the actual breeding process, and provides users with a brand-new breeder training and education mode.
In the traditional breeding industry, the training of professional breeders is difficult and cumbersome. In the training process, a breeder can only learn and master the corresponding training skills through text materials and video materials, but he has not experienced the complete breeding process. But using virtual reality technology, we can break through this layer of restrictions, so that the breeder can master the details of every corner of the farm in a virtual breeding scene. Even users can simulate a real breeder and experience a complete set of breeding process. This virtual farming system is designed to accomplish this function.
This article starts with the advanced virtual simulation technology results at home and abroad, analyzes the feasibility and requirement of the system. According to the actual farming process, the framework and implementation of the entire virtual farming system were designed. According to the system design framework, we divide the system into daily feeding modules, process modules, and data storage modules. Finally, the design and implementation were carried out according to the functions and features of each module.
The virtual farming system designed not only brings a brand-new operating experience to the training of breeders, but also, it integrates the knowledge and skills into the system. It helps intern breeders to quickly integrate into the real breeding process through the system. it also provides a good window for people to understand the breeding process.
In previous virtual simulation systems, the text data and video data were simply integrated and presented to users in 3D. However, in this system, the knowledge and skills are integrated into the system, It use the form of games to implement virtual farms and use the form of processes to implement experimental operations.

Key Words：  Virtual Simulation, Virtual Farming, Virtual Training, Unity3D


目    录

摘　要	I
ABSTRACT	II
第一章 绪论	1
1.1 课题研究背景及研究意义	1
1.2 国内外研究现状	1
1.3 论文研究内容	2
1.4 论文组织结构	3
第二章 相关理论和关键技术综述	4
2.1 培训教学理论	4
2.2 虚拟仿真技术	6
2.2.1 模型仿真软件和虚拟仿真引擎的选择	6
2.2.2 3dsMax技术	7
2.2.3 Unity3D技术	7
2.3生长曲线	9
2.3.1 Gompertz生长曲线的简介	10
2.3.2 饲料量对体重的影响	10
2.3.3 Gompertz生长曲线的改进	12
2.3.4 讨论与结果	12
2.4 其他关键技术	12
2.5 本章小结	15
第三章 虚拟养殖系统的需求分析与设计	16
3.1 虚拟养殖系统的需求分析	16
3.1.1 系统预期目标	16
3.1.2 系统风格	17
3.1.3 系统结构	17
3.1.4 场景划分	18
3.1.5 实现逻辑分析	19
3.2 日常饲养模块的分析与设计	21
3.2.1 场景模型模块的分析与设计	21
3.2.2 人机交互模块的分析与设计	22
3.2.3 界面UI模块的分析与设计	23
3.2.4 时间控制模块的分析与设计	26
3.2.5 环境模块的分析与设计	26
3.2.6 数据存储模块的分析与设计	27
3.3 流程模块的分析与设计	27
3.3.1 知识点模块的分析与设计	28
3.3.2 精液稀释模块的分析与设计	29
3.3.3 新手引导模块的分析与设计	30
3.4 本章小结	30
第四章 虚拟养殖系统的实现	31
4.1 系统整体与框架	31
4.1.1 系统实现整体流程	31
4.1.2 通信框架	31
4.2 日常饲养模块的实现	32
4.2.1 场景模型模块的实现	32
4.2.2 人机交互模块的实现	33
4.2.3 界面UI模块的实现	34
4.2.4 时间控制模块的实现	37
4.2.5 环境模块的实现	39
4.2.6 数据存储模块的实现	42
4.3 流程模块的实现	43
4.4 种猪AI系统	44
4.5 项目的优化	47
4.6 本章小结	48
第五章 系统测试与发布	49
5.1 系统的测试	49
5.2 系统的发布	51
5.3 本章小结	52
第六章 总结与展望	53
6.1 总结	53
6.2 展望	54
参考文献	55
攻读学位期间主要的研究成果	57
致谢	58



第一章 绪论


1.1 课题研究背景及研究意义
随着计算机虚拟仿真技术的飞速发展，各行各业已经将虚拟现实技术融入到了自己的应用领域当中，给人们的生活、工作带来了更多的可能性。
在以往，对饲养员的培育采用的是传统的教育方式，主要通过理论学习再辅助一定的实践操作练习。而这样的教育方式，具有以下几点不足之处［1］：
(1)效率低。在传统的理论学习中，主要采用的是书面文字的教授方式。面对书中大量的文字材料，用户们没有学习的欲望。在学习的过程中，往往会因为没有面临真正的养殖环境而产生很多不必要的问题，甚至对文字材料有错误的理解。
(2)培训时间长。用户在实训过程中，对家畜的饲养是漫长的，往往一个周期就需要数周的时间。用户不能在实践练习的过程中及时的得到反馈，这显然对用户的学习培训是不利的。
(3)损耗大。用户在实训过程中，因为对操作流程的不熟悉，往往会因为一些不当的举措，导致家畜的产量下降，甚至生病、死亡等情况，会产生不必要的损失。
(4)效果差。用户在进行实训过程中，并不知道自己的一些不当操作会产生什么样的后果，往往会得过且过，这不仅会造成产量的下降，更不利于对饲养员的培训。
因此，针对在传统的饲养员培训过程中的不足。本文设计并实现了一套虚拟养殖仿真系统。该系统将真实的养殖场虚拟到系统中，让用户能身临其境的观察并学习养殖技能。该系统将漫长的培训周期尽可能的缩短，并将用户的每个操作数据化，通过用户的不同操作，会对家畜有不用的影响，从而及时的反馈出用户的不足。通过这样的培训方式，会大大的缩短培训周期，提高对饲养员的培训效果。


1.2 国内外研究现状
虚拟仿真技术是如今世界前沿科学之一，21世纪以来，虚拟仿真技术得到了质的飞跃，其在教育、建筑、制造、军事、科学技术等领域内都得到了广泛的应用。虚拟仿真技术的优势得以充分发挥，各大小公司纷纷研发虚拟仿真产品来辅助、加强自身的工作［2］。 
法国Cryo和Canal环广公司联合制作并发布了教育游戏《埃及：法老王之墓》。该游戏通过描述了3000年前古埃及的人文、政治、经济、文化等历史景象，使用户在游戏的过程中学习相关的历史知识［3］。
20世纪70年代，西方国家运用虚拟仿真技术，模拟出了海洋工程船的轮机模拟器，虽然在现在看来，其使用的技术相对落后，但是这给后期相关技术的发展提供了良好的科学与理论依据和借鉴作用。近年来，大连海事大学轮机自动化实验室也开发出了DMS系列的虚拟仿真管理系统，成为该领域的优秀作品［4］。
20世纪90年代，美国为了维修在太空中的哈勃望远镜，专门设计开发了一款虚拟维修培训系统，要知道，在太空中维修是件很精密的工作，来不得半点瑕疵。对哈勃望远镜在太空中维修的虚拟仿真，给用户提供一种很好的训练机会。100多位宇航员通过长达四个月的虚拟仿真训练，很好的完成了实际维修任务。
2013年6月，北京理工大学提出了3DDIS平台，运用Unity3D虚拟仿真引擎开发了虚拟仿真战场，将演习中的作战任务设计成一套培训软件，用于军事任务训练，使得操作员可以在3D虚拟环境下完成不同的训练任务，很大程度上节约了训练的成本，提高了训练的效率。
在 2014 年纽约的汽车展展会上，世界知名的汽车制造厂商克莱斯特公司在展台中，利用虚拟现实技术来模拟了一个汽车制造车间。在装备有Oculus Rift的车中，用户置将身于一个虚拟的载具中，打开软件后会有温柔的语音向导来介绍给用户如何驾驶这个虚拟的载具。 
而在建筑方面，虚拟城市的建设也逐步体现出了他的优势，各大校园和建筑商，都通过虚拟仿真软件来构建出三维可视化的景象［5］。通过对实物的三维建模，数据整理，重现了现实中的景象，并通过数字技术添加导航、语音、文字等辅助系统，通过这样的三维可视化软件，更好的达到了展示的效果，让用户足不出户就能感受到真实的地理面貌。


1.3 论文研究内容
本文的主要研究内容是基于Unity3D的虚拟养殖系统的设计与实现。通过对现实中猪养殖的具体环境以及相关的流程和规范的实地考察，并进行需求分析，可行性分析，设计一套完整的设计实现方案。根据设计方案，将系统划分为不同的模块，并根据现实中的问题提出一定的解决方案并加以实现。
本文详细阐述了虚拟养殖系统的设计理念，在分析阶段确定系统的设计风格和预期的目标，将系统进划分为日常饲养和流程两大模块，分别从日常操作和知识点的讲解两部分对用户进行培训。在日常饲养模块中，将系统进行进一步划分为场景、人机交互、UI、时间、环境、存储六大模块，详细的阐述了设计的理念和思路。在流程模块，通过流程动画的形式向用户展示饲养过程中需要着重掌握的知识技能，并引导用户进行模拟训练。在虚拟养殖系统的实现阶段，先将系统的整体框架搭建成功，确认各模块之间的通信方式。然后根据设计的两大模块分别加以实现，最后辅以项目的优化和测试。
本系统在资源方面主要通过Unity3D作为虚拟仿真引擎对系统进行脚本代码的编写，通过3dsMax建模软件进行虚拟场景和模型的搭建，在UI方面，通过Photoshop进行图片和贴图的编辑，并通过Unity3D自带的UGUI系统进行UI界面的设计与实现。


1.4 论文组织结构
本文分为六个章节，结构如下：
第一章绪论。本章阐述了当前培训教育模式的不足以及通过虚拟仿真技术可以为未来的培训教育模式带来的契机。介绍当前虚拟仿真技术在国内外的发展应用情况。阐述了论文的主要内容和总体组织结构。
第二章理论背景。本章阐述了系统的设计理念和应用到的教育理论，介绍了系统在实现过程中运用到的工具软件。
第三章分析与设计。本章根据现实中的猪养殖的操作流程与理论知识，分析设计了猪养殖虚拟仿真方案，分析其虚拟仿真过程中所需要解决的问题，并提出具体的解决方案。通过对系统的整体分析将系统划分为不同的功能模块，并对每个模块加以分析与设计。
第四章系统的实现与优化。本章根据设计的方案，运用相关的工具，对各个功能模块进行实现。并在项目框架基本完成之后，对系统进行部分优化，主要是性能优化和实用性优化。
第五章系统的测试与发布。在项目完成之后，对项目进行具体的测试，主要是功能测试、性能测试和可用性测试，以保证系统在运行过程中，不会出现过大的漏洞。在测试修改结束后对系统进行打包发布，完成虚拟养殖系统的实现工作。
第六章总结与展望。本章对论文进行全面的总结，阐述系统的不足和对虚拟仿真未来发展进行展望。



第二章相关理论和关键技术综述


2.1 培训教学理论
本系统设计通过虚拟仿真的方式培训专业的猪养殖饲养员，在培训理念上主要借鉴的一些经典的教育培训理论：
（1）客观主义认识论
从客观上来说，培训教学的目的就是让用户和用户能够通过系统软件能够快速、正确的学习到应该掌握的知识。本系统就是基于这样的认识论，告诉用户什么样的操作才是正确的。在虚拟养殖的过程中，需要传授给用户的是一些客观的知识技能，在模拟操作部分，给用户设计了一整套完整的、正确的操作流程，教会用户如何正确的进行操作［6］。仿真的设备、场景、工具、器材，与现实相似，给用户提供了更加真实的操作环境。这样的教学方式，能够让用户客观的学习到正确的知识。
（2）戴尔经验之塔理论
美国教育家戴尔1946年在其著作《视听教学法》中提出了著名的“经验之塔”的理论，该理论对“经验是如何得来的”这样一个问题进行了详细的阐述［7］。他认为，人类可以通过直接或者间接的方式来学习获得所需的经验。根据各种经验抽象程度的不同，他的将人类获得的知识经验的方式分为三大类、共十个层次，如图2-1所示。

图2-1 戴尔经验之塔理论

通过对戴尔经验之塔理论的解读，可以清晰的了解到：人类获得经验的方式主要有抽象的符号、观察、和做。宝塔顶层的经验最为抽象，越往下的经验则越具体，而越具体的经验越容易被人们接受。在过去传统的教育方式中，书本的教育方式是抽象经验的获取，而多媒体的教育方式是观察经验的获取。经过多年的发展，抽象经验和观察经验的知识获取已经做的相对比较完善。但是在做的方面，并没有很好的过渡。而虚拟仿真的培训模式，则给用户提供了一种从观察到做的过渡方式，虚拟仿真的教育方式相较于传统的教育方式更为具体，更能直接的向用户传输实用的信息，加强了对观察教学的扩充，使得用户可以在观察学习的基础上提升到做的程度，这将很大程度上提高用户的学习效果。
（3）游戏化学习理论
游戏化学习理论就是通过将教学模式进行游戏化，从而提高人们的学习兴趣，化被动学习为主动学习的一种方式。有些学者又将这种教学方式称之为“玩学习”［8］。它是目前比较流行的教学理论，不仅很多教学软件运用到了这种理论，在教师平常的教学工作中，也会通过游戏娱乐的方式提高教学效果。而本系统在日常饲养模块就是采用了这种游戏化的教学模式，在虚拟养殖的过程中，用户可以在游戏的过程中学习到相应的理论知识技能。这无疑会增加用户的学习兴趣，调动起用户的学习热情，提高用户的学习效率。
（4）激励理论
激励实际上是对人心理上的驱动力。而激励理论是研究如何激发人的行为积极性的理论。激励理论的目的是激发人正确的行为动机，调动人的积极性和创造性，以充分发挥人的行动力。在一般的游戏中，激励理论是必不可少的，通过各种奖励的形式，调动用户的游戏欲望，从而留住用户，增加游戏的娱乐性。在本系统中，同样使用了少量的激励理论。用户在进行虚拟养殖的过程中，会与场景内的事物进行交互，系统会通过用户的不同操作来判断这样的操作会对养殖结果造成的什么样的影响，并以成绩的形式反馈给用户。通过成绩、荣誉的形式可以激发用户的学习乐趣、提高培训学习的效果。
（5）沉浸理论
沉浸理论最早是在1975年被美国著名心理学家Csikszentmihalyi提出的，他认为：当人们在进行某些日常活动时，更倾向于集中注意力，完全投入到情境当中，并在不自觉中会过滤掉其他不相关的知觉，进入一种沉浸的状态［9］。
随着计算机技术的发展，沉浸式理论已经逐渐扩展到虚拟仿真领域中并得到了很好的应用。而虚拟养殖系统就是将现实的养殖过程模拟到虚拟的计算机世界中，使得用户在体验虚拟养殖的过程中，融入到真实的养殖场景中，进而沉浸到学习的内容中。这将大大提高用户的学习深度。


2.2 虚拟仿真技术
虚拟仿真又称为模拟现实技术，是使用虚拟计算机生成的系统来模拟一个真实存在的现实世界的技术。虚拟仿真实际上是一个计算机软件程序，它可以创建出一个虚拟的可体验世界［10］。这个虚拟世界可以是现实中的世界亦或者是假想中的虚拟世界。计算机通过计算生成这样一个虚拟的世界，它将现实事物的自然变化和相互作用通过三维仿真的方式呈现在虚拟的世界中［11］，用户可以通过视觉、听觉或是触觉等各种感官渠道与虚拟世界进行交互。
而实现这种虚拟仿真的外在表现形式是多种多样的，最常见的是通过PC或是手机的3D展示的方式，来展现实物的整体面貌［12］。随着虚拟技术的不断发展，多种更加方便的工具应运而生，通过头盔显示器可以实现VR/AR技术，通过数据手套等辅助传感设备也能提供用户现实操作数据的输入。这为用户提供了观察虚拟世界和与虚拟世界交互的不同方式，以便用户可以沉浸式地体验到仿真对象在环境中的变化。随着虚拟仿真工具的不断发展，其更为沉浸式的体验性和更为直接的交互方式为虚拟仿真技术的发展提供了有力的支撑［13］。
现如今，虚拟现实已经发展成一门涉及计算机图形学、人机接口及实时图像处理等领域的综合性学科。虚拟现实技术的应用也已经融入到了各个领域，虚拟现实游戏的开发，战指挥系统的虚拟模拟，飞机、船舶、车辆的虚拟驾驶训练，工业装备的虚拟制造，虚拟装饰的展示，虚拟现实的教育培训，虚拟游戏等等方面都因虚拟现实的发展展现了新的面貌［14］。而生成一个优秀虚拟现实系统，需要解决以下两个主要问题：
①沉浸式的体验感。也就是说，虚拟现实系统的开发需要用户在一定程度上能感受到系统反馈给用户的信息，也就是如何让用户体验到与现实环境一样的视觉、触觉、嗅觉等［15］。
②现实的信息输入。完成的虚拟仿真系统应该能接收到用户的操作数据，以此来实现用户与虚拟世界的相互作用，让用户直接的与虚拟世界交互，这样才能增强虚拟现实的真实感［16］。

2.2.1 模型仿真软件和虚拟仿真引擎的选择
虚拟仿真技术是以构建系统一体化的虚拟环境为特点，通过控制虚拟环境的虚拟物体来表达客观世界的真实性［17］。它有着沉浸、互动、虚幻、逼真的特性，虚拟仿真技术已经运用到了生活中的各行各业。而实现虚拟仿真的方式则多种多样：
第一、模型仿真软件。如CAD、Pro/E、3Dmax、maya等，这些软件可以很好的制作出三维虚拟模型，并展示其逼真的细节［18］。但是其在交互能力、跨平台能力等方面有很大的局限性，只能构建出虚拟的物体，而无法达到仿真与应用的效果［19］。
第二、使用虚拟建模语言。通过这种方法能达到虚拟仿真的目的，但是要求过高，适用性比较小，开发者需要大量的代码编写才能达到虚拟仿真的目的，而在实际应用中，用户及开发者更希望通过可视化的构建方式来进行开发模拟。过于繁重的代码编写会给程序员造成很大的学习成本和压力，开发周过长也不利于虚拟现实技术的广泛推广。
第三、虚拟仿真引擎的使用。现阶段，虚拟仿真引擎是人们构建虚拟世界的主要方法。类似于Unity3D、UE4、寒霜3等虚拟引擎已经被越来越多的人所使用。其中，Unity3D由于其优秀的编辑能力、拓展性、交互性与跨平台性，备受关注［20］。
在本项目中，则选用Unity3D作为虚拟仿真引擎来完成实验目的。Unity3D虚拟仿真引擎有着优秀的仿真功能和良好的扩展性，可以很好的完成虚拟场景的搭建和仿真脚本的编写，从而达到虚拟仿真的目的。而在场景模型的构建上，则选用3Dmax软件，Unity3D引擎仅仅内置几个简单的几何模型，但是其良好的扩展性支持从外部导入自制的模型。

2.2.2 3dsMax技术
3dsMax是3D Studio Max的简称，是Discreet公司开发的（后被Autodesk公司合并）基于PC系统的三维动画渲染和制作软件。是在国内非常流行的三维建模软件之一，该软件在动画、工业设计、建筑设计、多媒体制作等多个领域都有广泛的应用［21］。
在虚拟猪养殖系统的设计实现过程中，所有的三维模型，都是通过3dsMax软件制作完成的，其中包括：外围场景、猪舍、角色模型、种猪模型、以及各种三维道具的制作，包括其中部分角色、猪的动画的制作。

2.2.3 Unity3D技术
Unity3D是由Unity Technologies公司开发的一款全面整合的专业跨平台游戏引擎。Unity是一款跨平台性非常好的软件，其编辑器可运行在Windows 和Mac 平台下，可将完成的项目发布至Windows、Mac、Web、iPhone、Android和Windows phone 8平台［22］。
自问世以来，Unity就以其简单的操作方式，成熟的虚拟技术，备受开发者的喜爱。它可以让开发者甚至是用户可以轻松地创建诸如建筑可视化、虚拟校园或是一些3D游戏等工程项目。给很多独立的开发者带来了巨大福音。在安卓和IOS盛行的今天，很多知名的手机游戏相继问世。其中，王者荣耀、炉石传说、神庙逃亡、纪念碑谷等好品如潮的游戏都是通过Unity3D引擎打造而成的。
Unity3D并不止是一款三维虚拟引擎，他本身就是一个完整的三维虚拟生态链。Unity3D引擎仅仅内置了几个简单的模型，但是却能完成如此众多的精美作品，这都要归功于其强大的生态系统。3D模型的大部分常见的格式都能通过拖放的方式直接载入到Unity编辑器内，这为虚拟世界添加了丰富的元素。在资平台的搭建上，Unity Technologies公司在Unity编辑器内内置了Asset Store资源商店，用户和开发者可以在上面分享和下载相关的资源，这就给开发者带来巨大的便捷，避免了开发者反复“造轮子”的过程，同时也给优秀的开发者提供了一定的报酬，提高了工具资源开发者的开发热情，而这样优秀的生态链的构建，也就使得Unity平台越来越完善［23］。
另外，Unity3D引擎的可扩展性也是特别优秀的。早些年，Unity编辑器的UI系统做的并不是特别理想，操作起来略显繁琐，用户和开发者想要开发出优秀、精美的用户界面是相对比较困难的［24］。基于此，一位大牛就开发了基于Unity的UI插件NGUI，这给当时其他的开发者带来了巨大的便利，只需要通过简单的图形化的操作，就能完成预期的效果。Unity上拓展功能的插件各式各样，本系统也同样运用了部分实用的插件，会在本章后面的插件部分加以详细介绍。
(1) 引擎简介
虚拟仿真引擎Unity3D的设计是十分简洁、清晰的。其操作界面主要分为六个部分：场景视图(Scene)、游戏视图(Game)、层级面板(Hierarchy)、项目面板(Project)、属性窗口(Inspector)、控制台窗口(Console)［25］，如图2-2所示。在进行项目实现的过程中，这六个部分，每部分都有其不同的作用，但是彼此之间又紧密地联系在一起，共同为项目服务。通过这种可视化的操作，可以让开发者所见即所得，大大地提高了开发者的开发效率。

图2-2 Unity操作界面图

场景视图(Scene)是编辑虚拟世界的主要窗口。在这里，开发者可以通过简单的拖放来实现场景初始化的操作。其中Scene视图的观察方式又分为了2D和3D模式，分别用以观察UI和场景内的物体。3D模式中，可以设置ISO、Persp模式，不同操作习惯的人都能灵活的操作以观察场景内的物体。
游戏视图(Game)相对来说就比较简单，该窗口显示的是摄像机所拍摄到的视角，即用户运行时所观察到的效果。这也方便了开发者对整个项目的运行效果进行调试修改。
层级面板(Hierarchy)是场景内所有物体按照层级关系排列的窗口面板。场景内所有的物体都会按顺序罗列在Hierarchy中，通过这个面板，开发者可以清晰的观察、设计场景内虚拟物体的逻辑层级关系。双击其中的物体，Scene会迅速的聚焦定位到场景内的物体。
项目面板(Project)是整个项目存放资源的目录。主要包括模型、贴图、动画、材质、音频、视频、脚本、预制体、文档等等。所有加入的资源都会经过Unity引擎的编译处理，开发者可以直接使用，省去了不必要的麻烦。
属性窗口(Inspector)是场景内物体的属性信息，这些信息以组件的形式存储在物体上，实际上就是一个个脚本来控制着场景内的属性，每一个脚本被称之为一个组件，用以控制该物体特定的属性。其中场景内的每个物体都会默认挂载一个位置信息组件Transform，用以确定其在场景中的位置。
控制台窗口(Console)也是一个重要的窗口，是程序在运行和测试的过程中，用以显示程序错误信息和调试信息的窗口。
(2) 脚本简介
Unity在其仿真功能的实现上是使用脚本的形式控制场景内各物体间的相互作用以及系统与用户的交互。其内置的各种工具和支持的第三方插件均是由脚本代码的作用而实现的。Unity支持的脚本主要是C#和JavaScript。本项目使用的是C#编程语言。
C#(C sharp)是微软主推的一款面向对象的高级编程语言。由于其拥有着优秀的语言特性，众多开发者和厂商都选择其开发高级的应用程序或作为底层的支持脚本而出现［26］。另外，C#语法优美、包含很多简洁的语法特性，为众多软件公司提高了开发速度，降低了开发成本，备受广大中小型公司的青睐。
	

2.3生长曲线
猪的生长是符合一定的生长规律的，将猪按照日龄与体重的关系绘制成曲线就是猪的生长曲线。生长曲线分析作为最基本的生长发育数据，不仅可预测猪的生长过程，而且在指导猪的饲养管理，育种过程中具有重要作用。本系统旨在设计实现虚拟养殖系统，同样也需要构建一条符合现实中猪生长规律的生长曲线来设计猪的生长过程。常用的动物生长曲线模型主要有3种，分别为：Lssogistic、Bertalanffy和 Gompertz模型。

2.3.1 Gompertz生长曲线的简介
本系统中引进的是产自安徽的圩猪。所采用的生长曲线是基于Gompertz的生长曲线，如公式（2-1）所示。公式中W代表猪的体重，t代表日龄。该公式是比较了Logistic模型和Bertalanffy模型后，经过生长曲线拟合所得到的拟合度最高的公式，拟合度（R2）达到了0.999以上。并且生长曲线的生长拐点日龄、拐点体重和最大日增重也比较符合圩猪的生长情况［27］。
W=174.94exp[-4.23exp(-0.006 t)]					（2-1）
将该生长模型绘制成生长曲线后，可以得到如图2-3所示的图像。

图2-3圩猪体重生长曲线

从图中可以明显的看出，实测中猪的生长曲线和理论中的基本一致，故可以将其作为虚拟养殖系统中圩猪的标准体重来使用。

2.3.2 饲料量对体重的影响
观察表明，在对猪的饲养过程中，一天只会吃某一区间的饲料量，在该区间内，若猪的喂食量超过一定的量，会造成猪的体重超过标准值，影响其健康和生长速度，若喂食量低于一定的量，则会造成猪的体重低于标准值，为了模拟饲料量对猪体重的影响，需要做一定的试验来采集分析喂食量对猪生长模型的影响。
随机选择预产期相近圩猪临产母猪数头，使用相同的饲养方案进行饲养，在母猪所产仔猪中，选取初生重相近的仔猪 100 头（公、母各半）用于后期对试验数据的收集与分析［28］，得到表2-1。


表2-1 仔猪至360日龄体重与饲喂饲料量关系表
日饲料量与标准适量差值/kg	样本数/头	日饲料量剩余/kg	体重额外增长量（体重与标准体重差值）/kg	体重额外增长百分比/%	日额外增长量/kg
-1.0	100	0	死亡	/	/
-0.8	100	0	死亡	/	/
-0.6	100	0	48.2+8.17	-58.41	0.188
-0.3	100	0	84.10+±10.07	-27.44	0.084
0	100	0	115.90±12.04	0	0
0.3	100	0	146.06±13.11	26.02	0.084
0.6	100	0	170.24±11.05	46.88	0.151
0.8	100	0.08-0.13	181.94±12.19	56.98	0.183
1.0	100	0.19-0.22	179.16±10.76	54.58	0.176

由上表分析可以看出，当饲料量过少时，会造成仔猪营养不良，会出现死亡的现象，当饲料量当达到一定峰值时，会造成部分饲料量的浪费。在一定区间，饲料量的额外投放量与体重的额外增长量成正相关。当日饲料量低于标准饲料量时，额外投放量与体重的额外增长量的转换率在0.28-0.32之间，当日饲料量高于标准饲料量时，额外投放量与体重的额外增长量的转换率在0.22-0.28之间。且转换率绘制成图像如图2-4所示。

图2-4 额外投放量与体重的额外增长量的转换率

通过Excel工具对图2-4所示的散点图进行线性拟合，得到公式（2-2）。
y = -0.1541x3 + 0.0258x2 + 0.0026x + 0.2779 		（2-2）
该公式即为额外投放量与体重的额外增长量的转换公式。其中，x为额外饲料量投放量，y为猪的体重的额外增长量额外增长量的转换率。
该公式可以很好的模拟出在不同的饲料投放下，会对猪实际的生长曲线造成一定的影响，将公式（2-1）与公式（2-2）相结合就可以很好的预测出，在不同的情况下，猪实际的生长曲线。

2.3.3 Gompertz生长曲线的改进
公式（2-1）是猪在标准的饲养环境下的生长曲线公式，结合虚拟养殖系统的实际情况，需要设计实现在不同饲养情况下，猪的生长曲线。这里讲猪的进食量结合 Gompertz生长曲线，模拟在不同的饲养情况下，猪的生长情况。
在虚拟养殖系统中，数据需要每天更新，猪的生长情况也是按天计算的。因此需要将猪的生长曲线具体到天来计算，对猪生长曲线的影响因素主要有两种：日龄和额外的进食量。将这两者因素都考虑到猪的生长曲线中，需要将公式（2-1）与公式（2-2）相结合，可以得到公式（2-3）。

其中，t代表猪的日龄，x代表当日额外的进食量，y是猪的体重的额外增长量额外增长量的转换率，xy即为每日猪额外的体重增长量。将每日的额外增长量xy累加之后再与标准体重相加，即为在模拟情况下猪实际的生长曲线。

2.3.4 讨论与结果
猪的生长发育受遗传、营养、环境、饲料量等多方面因素的影响，但是在规范的饲养场中，猪都是接种过疫苗，并在相同的试验环境下培育而成。因此，对猪的最大影响因素就是饲料量的投放，这里将饲料量的投放与日龄作为主要影响因素，结合实际的培育情况，模拟生成猪的生长曲线。
基于Gompertz生长曲线的生长模型能够对猪的实际生长情况作出相应的预测。以便于在虚拟养殖系统中，模拟出猪在不同的影响因素下，所呈现的不同生长状态，通过这种模拟可以很好的反馈出用户的操作水平，进而更好的达到培训教育的目的。


2.4 其他关键技术
在虚拟养殖系统的设计实现的过程中，部分较为复杂的结构或功能需要借助于其他技术来实现或者完善。
本系统主要用到的关键技术除了上述虚拟仿真技术和生长曲线之外，主要用到的相关技术如图2-5所示。其中UGUI技术用于实现系统界面，粒子系统用于实现部分特效，射线检测用于实现对于物体的选择和对UI事件的触发，碰撞检测主要用于控制用户移动范围，DoTween动画用于实现部分动画和演示流程，Animator状态机用于控制模型动画的切换，Behavior Designer行为树技术用于实现动物的AI行为。

图2-5 关键技术

（1）UGUI技术
UGUI是Unity中的UI系统，过去的UI系统是由GUI构成，GUI作为过去核心的UI系统之一，被众多插件使用，但是对于众多应用开发者来说，GUI显得过于“原始”，有着难学、难用、难修改等特点。所以后期推出了UGUI技术。
UGUI作为Unity引擎官方的UI系统，他可以很轻易的布置各种UI界面，对于系统中的文本、图片、按钮、菜单而言，其实都是UI系统的应用，UGUI技术的出现，实现了UI的可视化操作。开发者可以通过简单的拖放来确定UI之间的相互位置，简化了开发流程，提高了开发效率。
当在系统中创建UI物体时，引擎会自动创建一个Canvas和EventSystem。Canvas自带Rect Transform组件，Canvas组件，Canvas Scaler组件，Graphic Raycaster组件，用于控制该Canvas下的UI物体。EventSystem是UI的事件系统，用于响应与用户之间的交互操作。
对于每个UI上有一个Rect Transform组件，这个组件继承自Transform，用于设置UI的位置。Rect Transform组件上有一个锚点属性（Anchors），UI物体的具体坐标均是根据锚点的位置而设定的。默认锚点在中心，改变锚点的数值，可以让UI物体自适应屏幕的位置。
（2）粒子系统
粒子系统是通过许多微小粒子的组合来模拟现实世界中的不规则物体以及一些特效，例如爆炸、火、雨、烟等。粒子系统中的每个粒子都有很多属性，如大小、颜色、形状、透明度等。每个小粒子的属性由该粒子系统所模拟的物体而决定。粒子系统中的每个粒子均有其生命周期，每个粒子都是经历着从“产生”到“绽放”再到“消亡”的过程。随着时间的推移，旧的粒子逐渐死亡，新粒子逐渐诞生，在“绽放”中的众多粒子的共同作用下，就可以实现粒子系统的模拟效果，模拟出不规则物体的运动形态，最后经过渲染显示，实现预期中的效果。
（3）射线检测
射线检测就是由一个点向一个方向发射的一条无终点的线，在发射轨迹中与其他物体发生碰撞时，它将停止发射并返回检测到的物体的具体信息。创建一条射线Ray需要指明射线的起点（origin）和射线的方向（direction），RaycastHit对象用于存储发射射线后产生的碰撞信息。unity中的射线检测还可以控制检测的层级，通过对不同物体标注不同的层级可以用于固定检测某一层的物体。
（4）碰撞检测
碰撞检测就是给虚拟物体添加一个碰撞器组件，在虚拟场景中，通过不同物体之间的碰撞检测能够检测出场景中的物体的碰撞信息，Unity中的碰撞检测主要分为碰撞检测（Collision）和触发器检测（Collider）。碰撞检测主要用于检测物体之间的物体碰撞，而触发器检测主要进行区域判定。
Unity中有很多碰撞起，如 Box Collider、Sphere Collider、Casual Collider、Mesh Collider 等。在添加碰撞器组件的时候可以根据计算的精准度来添加所需要的碰撞器，其中的 Mesh Collider是比较精准的盒装包围体，它可以根据物体的网格外形建立和外形相符的包围体。每个碰撞器上有一个Is Trigger选项，将其置为True后，该碰撞器就变为触发器。
（5）DoTween技术
这是一款简单实用的动画插件，它其实现原理是将变量在规定的时间内以规定的曲线变化。这就使得一些简单的动画可以通过几行代码实现，而不用在物体上刻录大量的动画。插件还人性化的封装了不同的常用函数，用以作用场景内物体的颜色、位置、角度、大小等［29］。对于DoTween插件而言，它并不只是一款动画插件，根据其实现原理，它还可以作用于各种与变量变化相关的事件。
（6）Animator状态机
Animator在Unity中是作为一种单独的配置文件存在的文件类型。可以用于对多个动画进行整合、使用状态机来实现动画的播放和切换、实现动画融合和分层播放、可以通过脚本来对动画播放进行深度控制。
Animator状态机中的动画需要放置在Animator Controller内进行动画的控制，将动画添加到状态机中之后，就形成了状态机中的状态。在Animator Controller中，动画之间的播放不再是通过调用诸如“Play”之类的方法进行切换了，而是通过判断参数的变换来进行状态即动画的切换。通过设置状态机及各状态之间的参数，可以按条件进行状态的切换，根据不同的条件和需求可以播放不同的动画，也可以使得动画的播放更加流畅。
（7）Behavior Designer行为树技术
Behavior Designer行为树是一款强大的AI插件。目前在Unity3D开发的项目中，一般简单的AI模块的实现是使用逻辑控制或是使用状态机来实现的，而复杂的AI一般都是通过行为树来实现的。行为树主要是通过使用各种控制节点+行为节点的组合来控制事物的逻辑状态，使得开发者可以从行为的角都来控制事物之间的逻辑，改变了以往从状态来控制事物的方式。很大程度上减少了事物之间逻辑复杂程度，降低了开发者的开发难度［30］。很多开发者在开发复杂AI的过程中都会考虑使用行为树的方式。
而Behavior Designer插件就是以行为树模型为实现原理，在插件中主要有Composites 组合节点、Decorator 装饰节点、 Actions 行为节点、Conditinals 条件节点四种概念节点，都被称之为Task。通过这些节点的逻辑组合就可以实现较为复杂的AI系统。


2.5 本章小结
本章主要阐述了虚拟养殖系统在设计实现过程中所使用到的相关理论和关键技术。
在第一小节阐释了在系统的设计过程中，所使用的客观主义认识论、戴尔经验之塔理论、游戏化学习理论、激励理论和沉浸理论。在第二小节中对虚拟仿真的技术工具做了简要的介绍。在第三小节中，用Gompertz生长曲线对猪的生长情况进行建模，并加入饲料量作为影响因素，模拟预测出猪在不同日龄和饲料量的情况下，实际的生长曲线。对后文中虚拟养殖系统的构建提供了理论依据和模型基础。




第三章 虚拟养殖系统的需求分析与设计


3.1 虚拟养殖系统的需求分析
本系统旨在通过虚拟的饲养过程来培训饲养员，因此就需要用户可以通过本系统的使用，对于种公猪在饲养过程中喂养、打扫、运动、调教、采精、稀释、封装的流程知识加以掌握。在对饲养员的培训过程中，为了保证与现实养殖过程的高度统一，需要完整的模拟现实中的环境与过程。根据养殖技能的不同需要将不同的模块采用了不同的教学模式，力求达到最好的教学效果。
本系统需要根据现实中的猪养殖流程，设计一套完整、全面的虚拟猪养殖系统，用以培训经验不足的饲养员。在项目前期，需要咨询专业人事掌握正确的操作知识，并将其以合适的方式融入到系统中，让用户可以在体验虚拟猪养殖的过程中，学习并掌握专业的养殖技能，从而达到良好的教学培训目的。

3.1.1 系统预期目标
为了使“虚拟猪养殖系统”能够达到良好的培训教学目的，系统需要达到以下几个目标：
（1）仿真的虚拟环境。作为对饲养员进行培训的培训系统，系统所模拟的环境要与真实的环境基本一致，对于模型的尺寸和比例要相对比较精确，从而能达到虚拟仿真的效果。
（2）良好的操作方式。用户可能需要在场景内走动，对于角色的控制和视角的调整，要足够的友好。要能让角色观察到场景内大致的环境，这对用户对环境的了解和熟悉会起到积极的作用。
（3）正确的理论知识。对于一款教学培训软件，所传授的知识和技能必须是正确的，不然会对用户以错误的引导。并且，系统应该将知识与技能尽可能的融入到用户的操作过程中，在用户对场景进行操作的过程中，会对整个养殖过程产生一定的影响，从而引导用户进行正确的操作。
（4）及时的用户反馈。用户在使用培训系统模拟养殖的过程中，可能会进行一系列正确或者不正确的操作，对于这些操作或者环境的变化，应该及时反馈给用户，引导用户进行正确的操作。若用户反馈不及时，用户可能就会养成错误的操作习惯。这将不利于对用户的培训工作。
（5）友好的操作界面。操作界面是软件的门面，用户打开软件第一眼就会看见整个操作界面。美观、友好的操作界面会提升用户对软件的体验感。爱美之心人皆有之，美观的操作界面会让用户赏心悦目，友好的操作界面会方便用户与系统之间的交互，减少操作带来的烦恼，让用户更加专注于知识技能的学习当中。

3.1.2 系统风格
本系统的美术风格设计是半写实主义风格。系统内的场景、建筑、角色、猪以及所有使用到的3D模型设计是写实主义风格，这样的设计旨在用户能够真实的体验的和现实相差无几的养殖场景，提高用户的代入感。而对于UI界面和用户提示面板的设计则略柔和。

3.1.3 系统结构
在项目开始之前，需要对整个项目的功能进行整体的分析与设计，即项目需要完成什么样的功能，需要以什么样的形式来实现这样的功能，经过对于现实猪养殖情况的考察，将系统划分为以下几个模块。
如图3-1所示。系统将虚拟养殖系统分为两大模块：日常饲养模块和流程模块。在日常饲养模块中，系统旨在通过虚拟仿真饲养员的日常行为培训饲养员在饲养过程中需要掌握的知识技能，并通过最终的产值对于用户养殖过程进行综合评价。在流程模块中，将饲养过程中需要掌握的操作技能知识，通过流程动画的方式展示给用户。对于部分简单的操作技能，用户可以反复观察流程动画加以学习，对于精液检测等实验部分，通过流程仿真的方式，与用户进行交互，引导用户学习掌握该部分的知识技能。

图3-1 系统结构图


3.1.4 场景划分
（1）首页
在首页的部分，需要一个欢迎界面，并且简单的引导用户对软件有一些简单的认知和了解。在此之外，还应该提供给用户进入系统的入口，以便用户开始培训或者载入已经保存的进度。在这里，将首页的设计如图3-2所示。
在界面的左上角放上软件的名称和Logo。在界面的左下角放置设置相关属性，用于设置系统的声音，分辨率等通用属性。在界面的右下角放置系统的载入按钮，其中新的场景用“新的旅程”命名，而对于已保存资源的载入用“继续旅程”命名。

图3-2 首页设计图

（2）角色选择界面
在用户点击新的旅程准备进入一个新的场景时，应该有一个选择界面，用以选择不同的角色模型和场景，以便用户可以用不同的身份进入到不同的培训场景当中。界面设计如图3-3所示。

图3-3 角色选择界面设计图

（3）淋浴消毒场景
淋浴消毒的过程是每个角色和养殖场都必须要经历的过程，因此，在这里，需要单独设立一个场景来设计虚拟的淋浴消毒的过程。在该场景的设计过程中，考虑到淋浴消毒的过程很简单也很固定，这里采用的是拍电影的手法，将整个淋浴消毒的过程分为三个镜头呈现给用户，以达到教学的目的。这三个镜头分别是：进入生活区的更衣室脱掉日常服装，在淋浴室淋雨，穿过淋浴室，到工作区的更衣室更换工作服。场景设置如图3-4所示。

图3-4 淋浴消毒设计图

（4） 养殖场场景
养殖场场景是饲养员日常工作的主要场景，也是软件使用的最多的场景，在这个场景中，用户需要对猪进行喂食、卫生、通风、温度调节以及一些特定的操作。这部分采用的是自由的游戏化教学方式，让用户在游戏的过程中学习猪养殖的具体的细节，并且通过各种反馈告诉用户，您是否有不当的操作。
（5）实验场景
此部分场景主要是在公猪进行采精后对精子进行质量检验和稀释的实验环节。因为实验的过程比较固定且严谨的，所以这里采用的是流程仿真的教学方式，引导用户进行一步一步的操作。当用户操作错误时，系统会弹出错误的提示音，只有当用户进行正确的操作时，才能继续下一步操作。

3.1.5 实现逻辑分析
系统的主体部分是模拟饲养员的日常工作。现实中，这部分的耗时最长，也是饲养员的主要工作内容之一，系统在虚拟仿真这部分的过程中，无法完全模拟现实中的养殖过程，这样耗时太长也无法达到良好的教学效果。在这里，软件采用的是游戏化学习理论，即把饲养员的日常工作虚拟设计成类游戏的模式，有效的加快了时间的进度，并添加相应的反馈模式，让用户在游戏的过程中就能及时的掌握、学习相应的理论知识。
（1）操作模式
系统的主体操作模式将采用第一人称视角，摄像机拍摄到的画面即用户现实中可以观察到的画面，以第一人称的形式进行虚拟仿真，会增强用户的沉浸感，让用户能更直观的体验到所要掌握的知识技能，将现实场景和知识点紧密的结合在一起，增强用户的代入感。
（2）种猪舍场景布置
经过对实地养殖场中种猪舍的参观学习，按照对应的CAD图纸，将种猪舍进行1:1还原，设计了如图3-5所示的种猪舍场景。

图3-5 种猪舍场景分布图

其中1-24是猪舍中种公猪的猪栏位置，每一个猪栏对应一头种公猪，左下角两个房间依次是实验室和采精室。采精室用以对种公猪进行采精、调教操作，当对种公猪采精完毕之后需要将采集到到的精子通过采精室与实验室之间的无菌窗口传递到实验室中。以便及时得将采集到的精子进行分析、稀释和保存的操作，确保精子的质量。
（3）业务逻辑
当用户进入到种猪舍场景后，需要通过一系列的操作与场景进行交互，然后系统后台会通过用户不同的操作记录相应的数据，并作出相应的反馈，从而达到培训饲养员的目的。人机交互模块将在后文详细阐述，这里主要介绍收集到用户的操作数据之后所对应的业务逻辑处理过程。种猪舍业务逻辑设计分为四大部分，如图3-6所示。

图3-6 种猪舍业务逻辑图

①　初始化
第一次进入场景时，场景内有20只种公猪，空余四个猪栏留给用户进行操作。其中，部分为已调教种猪，供用户直接采精，其余为未调教种猪，提供给用户进行调教。温度、湿度根据收集的数据和进入系统的时间自动化获取。氨气浓度调节到最适宜的情况。
②　全局功能
在一个猪舍中，对于温度、湿度和氨气浓度的调节是对整个猪舍进行整体调节的过程，而投放饲料的喂食过程在自动化养殖的今天，已经是一体式的统一投放，因此在喂食过程也放在了全局功能中，而具体单个种猪的差异喂食则通过调节投喂的饲料量来实现。恒温箱是对种猪进行精子采集处理后保存的场所，这里放在全局功能也方便用户对其进行一定的操作。
③　种猪操作
在具体的养殖过程中，每头种公猪都是独立的个体，需要具有一定的差异化，包括种猪舍的卫生状况、种猪的月龄、健康、营养等状况。在这里通过不同的数据存储每个种猪的不同信息，以便系统可以通过用户的差异化操作反馈用户的操作水平，进而对用户进行评价，从而达到培训教育的目的。
④　用户反馈
用户与场景交互后需要有效的反馈机制来反馈给用户一定的信息，以便用户了解自己的操作会对猪舍造成什么样的影响，从而有效的规范用户的操作。在这里，系统通过UI界面的形式来反馈给用户，反馈的信息主要包括：种猪的健康、卫生、活跃度等差异化信息以及猪舍的温度、氨气等全局环境信息。


3.2 日常饲养模块的分析与设计
在日常饲养环节中，本系统设计采用虚拟仿真的方式，模拟现实中日常工作内容。对现实中的养殖场的养殖过程进行实地考察采集数据，并将其进行虚拟化仿真，辅以键鼠操作、UI显示等功能。让用户通过对虚拟养殖系统的使用，可以体验到真实的养殖工作内容，并通过日常养殖的操作，对养殖流程有详细的了解。系统不仅应该有表象的养殖模型，对于各种日常操作对于产值的数据影响，也需要进行数值分析与设计。
为了达成这样的设计目的，系统就需要场景模型模块、人机交互模块、UI模块、时间控制模块、环境模块、数据存储模块来充实虚拟养殖系统，从而更好的完善日常饲养模块的实现。

3.2.1 场景模型模块的分析与设计
在软件的设计与实现过程中，场景和模型是整个软件的载体。用户需要在场景中与各种模型进行交互，因此，在虚拟场景中建立的模型应该是真实事物的客观反应，用户在使用软件的过程中会通过模型的立体感和逼真感来直观的感受软件系统，模型的好坏会直接影响使用者的用户体验。由于模型的创建不是阐述的主要内容，这里就作简单的阐述。
场景中的所用模型，包括：工具，猪舍，场景都是由3dsMax软件根据CAD图纸等资料进行1:1的还原建模，并辅以真实的纹理贴图和材质制作而成。由于场景中大部分的地方是观察不到的，比如房顶阁楼、地板以下外场景中其他猪舍等，这里在模型看不到的面可以不进行建模，这样既减少了软件所占用的内存，也提高了软件的使用性能。
实现的场景模型图如图3-7所示。
  
（a）外场景模型图                       （b）实验室场景模型图


（c）种公猪模型图
图3-7 场景模型实现图

3.2.2 人机交互模块的分析与设计
人机交互的设计好坏直接影响到用户的操作体验，良好的人机交互模式，可以给用户以良好的代入感。一款优秀的软件系统应当减少用户在人机交互过程中产生的繁琐操作。
在本系统中，主要的信息录入方式是通过键盘和鼠标的信息录入。在用户以第一人称模拟仿真饲养员的过程中，用户通过WASD键来控制角色的前后左右移动，通过鼠标右键拖动来控制视角的方向，通过鼠标左键的点击操作来与UI界面进行界面操作，在调节饲料量的过程中，通过数字键来录入每头猪需要摄入的饲料量。



3.2.3 界面UI模块的分析与设计
UI模块是人机交互的重要组成部分，是一个相对比较复杂的模块，用户进入系统之后最直观的呈现在他们视野内的除了整个场景的模型之外，就是UI界面。UI界面的设计直接关乎到用户人机交互是否友好，美观的UI界面会让用户赏心悦目，友好的UI界面会减少用户在软件上的学习成本。所以这里将UI界面独立成一个模块加以分析与设计。
（1）种猪舍主界面
在种猪舍主界面的设计过程中，通过上中下三部分的UI设计将界面的提示信息和主要操作界面放置在方便用户观察和点击的位置。
主界面顶端的设计：将头像、日期、金币等数据信息放置在页面的顶端左部，通过金币的形式显示用户的总体操作水平，进行最终的评价；将时间，天气、温度等数据信息放置在页面的顶端中部，用以提示用户当前的环境状况，提醒用户对室内环境进行操作；而保存和暂停操作也是常用的主要操作。
主界面中下部的设计：室内温度和氨气浓度等信息是影响种公猪健康的重要指标，放置在左侧偏上的位置，可以醒目的提示用户当前室内的环境状况。全局操作放在左下角。在右下角放上必要的其他操作，其中，批量操作是当用户操作比较熟练之后，通过批量操作，可以减少重复的操作，通过简单的大局观的调控，以达到对整个种猪舍养殖情况的掌控。而加速按钮是为了加快游戏进度而设计的，即使模拟的系统时间已经按照比例将现实中的时间加快了，用户也会耗费大量的时间才能了解和掌握到一整个操作周期后的整体操作成果。时间加速功能可以在用户进行完需要的操作之后，将时间跳转到未来的某一时刻。知识点按钮是单独的一个模块，用以将一些固定的流程，以知识点的形式展示给用户，在后文中会加以阐述。主界面设计图如图3-8所示。

图3-8 种猪舍主界面设计图

（2）种猪操作界面
种公猪操作界面是在用户点击具体的种公猪时，以种公猪为圆心，弹出操作界面。当用户点击不同的操作按钮时，会触发不同的事件。
如图3-9所示。列举了种公猪在日常饲养中所要经历的常用操作，包括：清理、洗浴、采精/调教、营养、运动以及淘汰。种公猪一般需要经过调教后才可以进行采精，采精和调教过程是相互冲突的，同一头种猪只能进行采精或者调教操作，因此这里将采精和调教设计成一个按钮，根据种公猪是否完成调教分别显示采精或者调教按钮。对于还未调教的种公猪，仅可以进行调教操作，无法进行采精操作，故仅显示调教按钮即可。对于调教完成的种公猪，无须再进行调教操作，仅需要进行采精操作，故仅显示采精按钮即可。

图3-9 种猪操作界面设计图

为了减少过场动画播放次数，减少用户观看流程动画的等待时间，这里将对于种猪操作后产生的流程动画独立出来。当被选中的种猪进行到某一操作时，该种猪会消失，在原地显示一个信息面板，提示该种猪正在进行的操作，用户可以观察到该操作的具体信息，点击查看按钮，用户可以观看具体的过场动画。具体的操作信息提示面板设计如图3-10所示。

图3-10操作信息提示面板设计图

（3）操作界面
在UI界面的设计过程中还有很多操作面板的设计，比如恒温箱面板的设计、批量操作面板的设计、加速面板等，这些面板都是与系统交互的重要面板。这里着重介绍批量操作面板，其余面板与该面板的设计方式基本类似，由于篇幅的限制，这里省略不作描述。
面板设计如图3-11所示。批量操作面板是为了方便用户的操作，而将大部分的操作统一集合在一个面板中，让用户可以快速的完成需要的操作。在这个面板中，当用户点击猪栏时，猪栏信息位置会显示该猪栏的具体信息，对应的操作按钮：洗浴、运动等操作会根据种猪的情况显示是否可用，当点击可以进行的操作时，猪栏下方的操作框会显示当前正在进行的操作。当点击清理猪舍或者投放营养按钮时，会对当前选中猪舍进行相应的操作。这样就不必对每个猪舍都进行相应的操作，当然，建议用户在最初使用软件的过程中少量使用这样的批操作，批操作虽然省事省力，但同时也会减少用户对具体操作的学习程度。

图3-11 批量操作面板设计图

（4）提示界面
任何一个系统都少不了提示界面的出现。顾名思义，提示界面的作用就是将一些需要提示的信息显示在用户的视野面前，用以提示用户。在虚拟猪养殖系统中，一些不良的操作可能会对种猪的健康有所影响，进而造成生产效率的下降，而提示界面的及时出现，就可以将用户的操作结果及时反馈给用户。
在本系统中，对种猪主要的影响因素包括环境因素和猪自身的因素。在这里，环境过差的情况下，系统会弹出相应的提示界面，如：温度过高，氨气浓度过高等。如果是猪自身因素影响，会在相应的种猪头上，出现不同的提示图标，如：“太累了”、“我饿了”等提示信息。如果是环境因素，则会在左上方的环境信息UI上显示环境的信息，环境因素数值过高或者过低，会以不同的颜色标注。这些提示信息的出现，相当于一个优秀的导师在带领着饲养员在进行培训教育活动，及时的用户反馈，会帮助饲养员避免一些坏的习惯和错误的操作，从而达到提高培训效果的目的。

3.2.4 时间控制模块的分析与设计
虚拟猪养殖的好处之一就是能大大减少饲养员的培训时间，因此在本系统的设计中，时间的控制是特别重要的。在时间控制模块的设计中，系统的默认时间流速是现实的30倍，即现实中2分钟等于虚拟世界中1小时。但是这样的设计还是会产生很多的等待时间，用户在操作结束后会希望跳过等待之间直接进入到下一流程，为此系统设计增加了时间加速功能，用户可以在完成相应的操作后，通过时间加速功能跳过不要操作的等待时间。其中为了防止用户误操作，这里时间加速功能无法跳过当日，用户每天都需要对猪舍进行相应的操作，跳过几天是没有意义的。

3.2.5 环境模块的分析与设计
系统的环境需要模拟现实中的环境，过热、过冷的环境都需要用户进行相应的操作来保证种猪的健康。虚拟系统中的环境因素主要包括2个方面：温度、氨气浓度。
氨气浓度的设计比较简单。给其设置相应的函数，若不开启通风机，则氨气浓度持续升高，开启通风机后，空气中氨气浓度相应的降低。从而达到调节空气中氨气浓度的目的。
温度的获取则比较麻烦，现实中温度的影响因素有很多，本系统中选取了几个重要的因素对现实中温度进行模拟。
（1）季节因素
不同的时间段，温度是不同的，冬天相应温度较低，夏天温度相应较高。为了模拟不同季节的温度。系统收集了过去某年每个月的历史温度数据，整理成文档，并设置相应的函数计算相邻两月之间具体日期的温度数据，通过这样的设计，可以获取原始的某月某日的大致温度情况。
（2）天气因素
不同的天气对温度也是有所影响的，同一时间段内，阴雨天的温度会比晴天的温度相应低一些。不同的季节会出现的天气也是不同的，一般只有冬天才会有雪的出现，春天、夏天雨水会多一点，秋天刮风会多一点。这些因素都应该考虑到，进而影响室外的天气情况和温度情况，这样的模拟看似对数据的影响不是很大，但是这些因素都会影响到种猪的身体情况，进而对培训效果有不同程度的影响。另一方面，这样逼真的展示形式也会给用户良好的用户体验。

3.2.6 数据存储模块的分析与设计
数据的保存和加载功能是软件必不可少的模块。在本软件中，对于数据存储模块的设计包括以下几个部分：
（1）用户数据的存储
用户很少会一次性完成所有的培训目标，也不会希望每次进入系统都重新开始培训。这就需要系统具有一定的数据存储来记录用户的操作记录。
本软件采用了一种简单的数据保存方法，即对当前游戏进度的数据进行整理，保存到xml文档中，当再次载入该进度时，获取xml文档中的数据，对系统中的数据进行初始化操作，从而实现了数据保存和加载的功能。
（2）多媒体的加载
系统中多出处运用到了多媒体的展示形式，尤其是流程模块，对于这些特定知识点的讲解，系统需要多次加载视频和音频文件。对与多媒体模块的需求，可以用单独的模块将其独立出来，方便用户对相其进行操作。同时，也可以降低程序的耦合性，开发人员和用户可以对多媒体的播放进行统一的管理。
多媒体模块需要具有播放、关闭、等功能，由于多媒体文件相应会比较大，因此需要在系统使用到多媒体文件时，动态加载以减少系统所占用的资源，所以这里还需要多媒体的加载、释放等功能。
（3）文档资源的加载
在存储模块中，除了游戏数据的保存和加载，还包括很多外部资源的加载。系统内环境数据的获取，日期的获取，视频资源的获取，都需要通过加载的方式，让所需资源加载到系统中。


3.3 流程模块的分析与设计
在本系统中，对于流程模块的知识点掌握，分为展示和仿真两个部分，对于一些特定的、客观的知识点的掌握，设计通过流程展示的方式，将现实中的操作流程通过流程展示动画让用户加以观摩学习。对于较为复杂的精液分析和稀释模块的知识点，通过流程仿真的方式带领用户进行一步步的流程操作，让用户可以更加精确、全面地掌握该模块的知识。另外在新手引导模块也将采用流程的方式，带领用户学习了解该系统的操作方式，减少用户对于本系统的学习成本。

3.3.1 知识点模块的分析与设计
虚拟养殖系统的设计目的是为了培养合格的饲养员，而系统并不能像在现实中操作一样，浪费大量的时间来观看过场动画和等待，这将大大降低用户体验。从另外一个角度而言，这部分知识点是需要用户掌握的，用户可能希望能够随时的反复观看加以学习。所以，这里需要将知识点单独成一个模块来展示这些信息。通过对养殖过程的分析，这里将用户需要掌握的知识点部分提取为：猪舍结构介绍、后备种猪调教、种猪采精要点、种公猪运动要点、精液分析稀释与保存、饲料线运行展示六个小模块。
设计实现界面如图3-12所示。

图3-12 知识点展示模块设计图

该模块的设计初衷是培训教育用户特定的专业知识，之所以将该部分知识点单独设计成一个模块有以下几个原因：
（1）知识点是比较客观的，步骤相对比较固定，用户在学习掌握该部分知识点的过程中无须过多的交互操作，仅仅需要观看学习进而掌握其知识要点。
（2）知识点流程动画耗时过长。这些知识点都是在猪养殖的过程中需要掌握的技能，相对比较重要，必须要用户学习掌握。如果放在日常的饲养环节中，用户每进行一次操作将会播放一次过场动画，这将严重影响用户对整个养猪环节的体验，无法感受到对猪养殖整体的把控，过于繁琐的过场也会给用户带来焦躁感。而将该部分提取成单独的一个知识点模块，将解决这个问题，既保留了知识点的完整性，又提高了用户体验。
（3）方便用户反复体验学习。对于重要知识点的学习，用户可能需要进行反复的观看学习。设计成单独的模块窗口，方便用户随时的进行学习掌握。
在设计知识点模块的展示形式的问题上，系统采用的是流程式的过场动画方式，运用第三人称视角虚拟仿真现实中的操作流程。即像播放电影一样，设计好摄像头的拍摄顺序和场景动画的播放顺序，以流程动画的形式展示给用户。让用户切身得感受到规范的操作流程是如何进行的。在这里，六个模块根据其复杂程度，设计用不同的形式展示给用户。
由于精液分析、稀释和保存的环节过于复杂，单纯的观看效果不佳，系统将其单独设计成一个模块，运用实验操作的形式，带领用户进行实验操作，进而达到良好的培训教学目的。该模块将在下文3.3.2节中加以详细阐述。
其余五个模块由于展示内容比较简单，主要是向用户介绍一些原理和技术要点，因此，这里采用的是模型动画辅以视频的培训教育模式：
（1）猪舍结构介绍：漫游系统场景，带领用户大致了解猪舍的整体构造，以对未来的工作环境有一定的了解。
（2）饲料线运行展示。现代化的猪舍喂食都是通过饲料线自动将饲料运输到猪槽中，饲料的投放过程展示也是方便用户对现代化的机械操作原理加以了解，进而加深对自己工作内容的理解。
（3）后备种猪调教。刚进猪栏的种猪一般不会配合采精，这就需要饲养员进行调教，来刺激种猪，以便后续可以方便的进行采精。在这里，有部分细节内容无法通过模型展示的非常到位，更有些需要注意的知识点需要提醒用户重点掌握，所以，这里采用了模型动画加视频讲解，最后辅以字幕说明的形式，全面地向用户讲解该部分知识点，以便用户全面、准确的加以掌握。
（4）种公猪采精。同调教的实现方式基本一致，这里不加以赘述，介绍了种公猪在采精过程中的知识要点。
（5）种公猪运动。为了保证种猪的健康生长和精子的质量，在天气条件允许的情况下，每天都需要驱赶种公猪进入到运动场进行运动。运动中的知识要点会在播放流程动画的过程中用UI动画的形式展示在三维场景中，对种猪的运用条件、运动场的设置、驱赶的方式、注意事项加以详细描述，用户可以在观看流程动画的过程中，掌握每个细节需要掌握的培训技能。

3.3.2 精液稀释模块的分析与设计
精液的分析、稀释和保存是猪养殖过程中的重难点，该部分也放在知识点模块，同样是因为其相对固定的流程和客观的操作，也因为并不是每个饲养员都需要进行这样的实验操作。对于需要掌握该部分知识点的用户而言，放在知识点模块可以提供给用户进行反复的练习以掌握该部分的知识点。
在本模块中，需要对现实中的精液分析、稀释和保存操作进行虚拟仿真。首先，就需要对实验室、实验器材以及整个实验流程进行全面的考察以便后期的建模和仿真都能达到逼真的效果。
实验流程中的每一个步骤，都必须严格按照实验过程来设计，这样才能达到教学的目的。出于对部分学生和用户更好的进行学习，在操作流程中应当给与适当的文字提示，让初学者能在实验的过程中，加深对知识的理解。对于部分对实验过程有所了解的同学，设计考核模式，减少甚至取消文字提示，并加入分值，从而对用户进行考察。
对于一个实验过程，首先需要一个清晰的实验流程，对现实中种公猪精子分析、稀释和保存操作进行完整考察和记录，将其整理成规范的操作流程文档，并将其按步骤实现。其次，在实验的进行过程中，为了模仿操作员的具体操作过程，需要模仿操作员的视角来进行操作，所以，这里可采用了第一人称视角的操作模式，角色面向操作台，通过鼠标点击不同的操作物品或选择不同的操作方式来实现实验操作的模拟。

3.3.3 新手引导模块的分析与设计
本系统虽然是一款虚拟现实的仿真软件，但是和现实中的操作毕竟有所不同，现实中是通过人与各事物进行交互，而本系统是通过计算机模拟猪养殖。用户在刚接触到本系统时可能会有一些无所适从，尽管系统已经尽量减少用户的软件学习成本，但是必要的新手引导是必不可少的。
在用户第一次进入到种猪舍场景之后，用户会接受到一个提示对话框，是否接受新手引导。若用户选择接受新手引导，那么，系统会带领用户将本系统所拥有的功能完整的走一遍，为了让用户以最少的学习成本来掌握这套软件，在新手引导部分，系统采用的是文字提示加光标提示的模式，引导用户点击相应的按钮，以实现不同的功能，让用户能够知道相应的操作会达到什么样的效果。


3.4 本章小结
本章主要介绍了虚拟猪养殖系统在需求分析以及设计思路，在第一小节中分别介绍了系统的预期目标、系统风格和整体设计思路；第二、三小节分别按照日常饲养模块和流程模块详细分析了系统各个模块的设计思路。在日常饲养模块中，主要介绍了：场景模型模块、人机交互模块、UI模块、时间控制模块、环境模块、数据存储模块。在流程模块中，主要介绍了：知识点展示模块、精液分析稀释保存模块以及新手引导模块。通过这些模块的详细阐述，完整规划了整个软件的实现细节，为软件的开发实现打下了逻辑理论基础，为软件的开发实现提供了技术支持。


第四章 虚拟养殖系统的实现


4.1 系统整体与框架

4.1.1 系统实现整体流程
在项目的实现过程中，首先设计整体的脚本通信框架用以各功能模块相互通信，增加脚本的可读性和可维护性，同时减少代码间的耦合性。在虚拟仿真系统中，需要一个人物角色来代替用户形象，所以这个角色的控制至关重要。在整体框架和角色都实现完成时，就需要对各个功能模块加以实现，其中包括流程模块，时间模块等等，这些模块是系统的核心模块，下文会详细阐述对这些功能模块的实现方式。功能模块实现完成后，就需要对整体做修改和优化，运用合适的技术，对需要完成的功能加以完善，可以提高系统的质量，提升用户体验度。具体示意图如图4.1所示。

图4.1  系统示意图

4.1.2 通信框架
对于整个程序而言，如果将所有的功能都写在同一个脚本里，会显得杂乱无章并且难以维护和管理，而将系统代码按照功能的不同定义到不同的脚本文件中可以有效地整理代码，同时也可以提高代码的复用性，减少耦合性。由于这些类都是单一的功能类，都是唯一存在的，所以应该将其设计成单例模式，方便在其他类中调用。但是在系统的实现过程中，各功能模块之间需要相互调用以实现完整的效果，这就需要设计一个标准的通信方式来管理和规范这些功能类，进而实现各功能类之间的信息通讯。
在具体的消息通讯过程中，各函数之间的调用需要很多数据的传递，这里可以将其封装打包成消息发送到消息中心，再通过消息处理中心将封装打包好的消息按照收包方的不同分发到不同的处理类中进行处理，如图4-2所示。这样的消息传递方式，虽然前期搭建有点繁琐，但是在后期的维护和项目的修改过程中，都是非常方便的。

图4-2 通信框架示意图

Mainprocess是发送请求方。当系统中某一模块需要调用其他功能时，该模块会将请求封装打包成一个消息对象，并将其发送给消息处理中心。消息处理中心对消息对象进行简单的分析后，并按照消息中收包方的不同将消息分发给不同的功能类。功能类收到相应的消息之后进行拆包解析，并且处理发送方发送的请求，并将处理结果以回调函数的方式返回给发送方。


4.2 日常饲养模块的实现

4.2.1 场景模型模块的实现
由于资源的制作在本文中不是重点内容，在这里就不做详细阐述。只简单介绍一下系统内所需要的主要资源，包括：视频资源、音频资源、图片资源、模型资源、动画资源。Unity引擎支持大部分资源的直接导入和使用。
（1）导入方式。这里有多种方式，一种是直接将资源拖放到Unity编辑器的Project面板内，但是这种资源的导入比较零散，而且会系统会自动生成附属文件。另一种是将资源直接复制到项目的Assets文件目录下，当再次打开Unity编辑器时，编译器会自动编译。Unity自己也提供了一种更好的导入资源的方式，就是将资源打包成Unitypackage文件，更方便文件的导入和传递。在Unity内置的Asset资源商店里，就是使用这种方式保存和下载资源的。
（2）部分文件格式问题。虽说Unity支持大部分的文件格式，并且在资源导入的时候都会对资源进行编译，但是部分文件还是无法直接使用，尤其的视频资源，Unity早期版本只支持将ogg格式的视频资源直接导入并使用，对于其他格式的视频资源，需要插件或者转换格式使用。

4.2.2 人机交互模块的实现
在种猪舍场景中，用户会操控饲养员以饲养员的视角在场景内活动。因此在虚拟猪养殖系统中，角色的创建和控制是首要的环节。角色的模型导入和普通的资源导入一样，请参考4.2.1节，这里就不做赘述。本小节主要阐述角色的创建和控制。
饲养员模型如图4-3所示。

图4-3 饲养员模型

（1）角色创建
在Unity3D中，摄像机拍摄的景象就是呈现在用户屏幕内的景象。本系统将采用第一视角进行虚拟仿真，因此就需要将摄像机当作是用户的眼睛，摄像机的视角需要像人一样在场景内行走和转换。
那么首先需要解决的问题，就是如何让摄像机和角色模型能保持同步。这里比较简单的方法是将角色模型放置在摄像机父物体下，让角色模型成为摄像机的子物体。通过这样的方式，用户在控制摄像机的移动和旋转时，作为子物体的角色模型就能和父物体保持相对静止，从而达到同步的目的。
但是在本系统中，这种方法不是特别合适。在本系统中，有很多模块是需要向用户展示知识点的，这就需要将摄像机和角色模型分离开来，从而可以观察到角色模型所要进行的操作。
首先可以通过在Unity3D的Hierarchy层级面板中右键创建一个主摄像机Main Camera。在新建一个空的物体Player，将角色模型放置在空物体Player下，使得摄像机和角色模型是独立的两个物体。然后在摄像机Main Camera 下，添加脚本WowMainCamera用以控制摄像机的跟随目标Target，设置Target为Player物体，使得摄像机的位置和旋转角度和Target保持一致，从而实现第一人称视角的游戏模式。
（2）角色的控制
角色的控制主要分为角色的移动和视角的旋转，在传统的RPG游戏中，一般是由WASD控制角色的移动，通过鼠标右键拖放来实现旋转效果，本系统借鉴了这种控制方式，通过键鼠操作来控制角色。
在Unity官方资源包中，封装好了的第一人称控制器（First Person Controller）和第三人称控制器（Third Person Controller），在本系统的角色控制中，使用第一人称角色控制器，用户可以通过第一视角观察到与现实中类似的场景并可以进行需要的操作，增强用户的体验感，提升用户在培训过程中的沉浸度。当然这些功能也可以通过开发者编辑脚本实现，开发者可以通过调用相应的API接口来控制角色模型的移动，并同时播放角色的移动动画。

4.2.3 界面UI模块的实现
在UI模块的实现过程中，本系统采用了Unity3D内置的UGUI系统，该系统经过长期的优化改良，已经成为比NGUI和GUI更实用的UI系统，被广大开发者所采用。
（1）界面实现
根据界面UI系统的设计，用Photoshop软件修改、制作、裁剪出相应的UI图标，并在UGUI系统上设置各UI图标的位置和功能。
在布置UI图片的过程中，即使我们布置好UGUI，如果我们不进行一些调整。在Unity3D默认的设置下，在不同分辨率中，UI的位置可能出错，导致程序的Bug，形象用户的体验，因此我们需要设置好锚点来固定UI的相对位置，让其能够自适应不同的分辨率。
值得注意的是，除了锚点之外，UI的层级也是非常重要的，确定UI物体在层级面板(Hierarchy)中的相对位置。在 UI 系统中，子级 UI 对象总是覆盖显示在父级 UI 对象上；层级相同的 UI 对象，下方的 UI 对象总是覆盖显示在上方的 UI 对象上。这样的设计避免了繁琐的深度设置。
设置好UI的层级和锚点之后，按照程序的设计，布置好主界面和各面板的UI图标。主界面UI与批量操作UI实现图如图4-4所示。
   
       （a）主界面UI实现图             （b）批量操作界面UI实现图
图4-4 部分UI实现效果图

（2）事件系统
UGUI系统给用户提供了EventSystem事件系统，它是一个事件监听的脚本，可以监听到用户与UI界面的交互事件，开发者可以将需要触发的事件绑定在相应的触发器上，当用户与界面交互的时候，就会触发相应的事件。
添加事件系统的方式有两种：一种是用过在UI物体上手动添加EventSystem组件并绑定相应的事件。这种界面化的操作方式在实现上固然比较简单，但是在后期的修改上会显得比较繁琐，测试修改过程中也不易发现这部分的BUG。另一种实现方式就是代码实现，通过代码添加事件系统并绑定相应的事件。这里建议使用代码添加，使项目资源更加规范，便于项目后期的修改和完善。
如图4-5所示是代码添加事件系统的方式。在UGUI上添加事件系统其实就是一个事件监听机制。若想让程序响应相应的操作，首先需要在相应的UI上添加事件系统组件EventTrigger，该组件就是实现事件系统的组件。添加过事件系统组件之后，需要新建一个事件，用以响应用户的操作，为了区别不同的事件，事件系统设置了eventID属性用以区别不同的事件，常见的事件有PointerEnter、PointerExit、PointerDown、PointerUp、PointerClick等，分别响应用户鼠标的进、出、按下、抬起、单机等操作。创建过事件之后，需要在事件上绑定监听器，以便用户在触发事件时，系统会做出不同的响应。最后则需要将事件添加进EventTrigger中，事件系统就可以正常运行了。

图4-5 事件系统
（3）UI界面重叠问题
在运行过程中，存在UI界面陆续打开后，相互重叠的问题（如图4-6所示），造成界面很混乱。因此，需要设计一种方法，在界面上有页面出现的时候，暂时不打开其他界面，包括系统自动弹出的反馈界面。

图4-6 UI重叠问题

为了解决这样的问题，系统运用了队列表的形式来存储面板。当当前窗口有面板正在运行时，若有其他面板打开，则将其加入到队列中等待。当关闭当前面板时，检查队列中是否还有元素，若有元素则弹出队列里的面板，显示出来，直到队列中没有元素为止。如图4-7所示。

图4-7 UI界面重叠解决方案

4.2.4 时间控制模块的实现
系统时间的控制是整个系统运行很重要的支撑部分。在虚拟猪养殖系统中，默认的时间流速是现实的30倍。并且，某些时间点会触发相应的事件。精子采集后，精子质量也会随着时间的增加而下降。很多这样功能的实现，都需要时间系统来做支撑。
（1）时间实现
在这里，定义了一个私有变量time_real，以毫秒的形式记录当前进行的总时间，time_Speed用以调节时间的流速。在第一次进入系统时，系统会记录下你登陆的真实时间，并以此为基数，通过计算用户在虚拟系统中度过的真实时间换算成系统虚拟时间，并最终通过UI界面的形式展示给用户。以这样的方式，来虚拟真实的日期和时间，使用户可以体验到不同时间节点给养殖带来的影响，给用户带来真实的体验感。
时间控制模块的关键代码如图4-8所示。
private float time_real;//真实时间
public float time_Speed;//时间流速
public int Day { get { return (int)(time_real / OneDay); } }
public Date StartDate;
public Date TodayDate{get
{     Date today = new Date();
            today.Year = StartDate.Year;
            today.Month = StartDate.Month;
            today.Day = StartDate.Day + Day;
            return today;
        }
}//今天 日期
    void Update()
    {
        if (Time.timeScale == 0) return;       
        time_real += Time.deltaTime * time_Speed;
    }
图4-8 时间实现

（2）固定时间点事件的触发
每天都应该给猪喂食，因为系统中时间的流速和现实中有所差别，用户往往会因此而忽略了喂食的时间，这就需要在中午之前提示用户对种猪进行喂食。类似的操作有很多，这就需要一个时间触发的事件机制，来满足系统的需求。这里使用委托的方式，每半小时调用一次委托。注册者判断现在的时间点，如果是11点半，则提示用户，需要及时喂食。
固定时间点事件触发的关键代码如图4-9所示。
public event DelegateHandler HalfHourEvent = () => { };
    public  int HalfHour { get { return (int)(time_real / OneHour * 2) % 48; } }
    private int HalfHour_Mark;//半小时标记，用以标记是否过去半小时
    public void Update()
    {
        if (HalfHour_Mark != HalfHour)
        {        
            HalfHour_Mark = HalfHour;
            HalfHourEvent();
        }
}
    void SetHalfHour()
{  
     if (HalfHour == 23|| HalfHour == 34)
       {
         Tishi("种猪饿了，请及时喂食");
       }
    }
图4-9 固定时间点事件的触发

（3）一段时间后执行事件
某些事件的执行并不是在固定的时间点，而是在几小时之后，这就需要系统可以延迟调用部分功能，协程看似能完成这样的功能，但是，由于软件的时间是虚拟的，所以，需要对协程进行进一步的加工才能完成系统的需求。
一段时间后执行事件的关键代码如图4-10所示。
    //time小时后，调用一次事件
    public void TimeEvent_Once(float time, DelegateHandler method)
    {
        float timeTotal = time * OneHour;
        float timeEnd = time_real + timeTotal;
        StartCoroutine(TimeAction(timeEnd, method));
    }
    //游戏时间事件
    IEnumerator TimeAction(float timeEnd, DelegateHandler method)
    {
        while (time_real < timeEnd) yield return null;
        method();
    }
图4-10 一段时间后执行事件

（4）时间加速
前面文章有阐述到，系统内设计了时间加速功能，这就需要系统可以快速的跳过相应的时间。对于系统时间而言，系统现在的时间由time_real决定，time_real变量记录的就是当前系统系统的时间，因此只需要将time_real加速到指定的是时间即可。这里为了给用户时间在流逝的感觉，也为了定义的事件委托可以正常执行，time_real需要循序渐进的过渡到指定的时间，并且在过渡的过程中time_Speed时间流速需要置为0。这里，系统使用了DoTween函数，来加速时间的流逝。
时间加速模块实现的关键代码如图4-11所示。
public void JiaSuTime(int endHour, int endMin)
{
        float endTime = Day * OneDay + endHour * OneHour + endMin * OneMinute;
        time_Speed = 0;
        DOTween.To(() => { return time_real; }, (v) => { time_real = v; }, endTime, 2.0f).OnComplete(() =>{time_Speed = 1;}).SetEase(Ease.Linear);    
}






图4-11 时间加速

4.2.5 环境模块的实现
对于系统内环境信息的获取，主要是通过线下收集每个月的环境数据再辅以一定的计算生成。以某城市为例，系统用XML表记录了该城市1-12月份每个月的最高气温和最低气温。根据当日的日期时间模拟出当日的天气状况，并根据天气情况，计算出当日当前天气某时刻具体的温度。
（1）温度XML表 
对于温度的获取，以一年为一个周期，收集记录后将信息通过XML表格记录下来，如图4-12所示。
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root>
  <city id ="01" name="城市1">   
    <month id ="01" name="一月">
      <temperature id ="01" name="max">7</temperature>
      <temperature id ="02" name="min">-1</temperature>
    </month>
    <month id ="02" name="二月">
      <temperature id ="01" name="max">9</temperature>
      <temperature id ="02" name="min">1</temperature>
</month>
......
  </city>
<city id ="02" name="城市2">   
    <month id ="01" name="一月">
      <temperature id ="01" name="max">8</temperature>
      <temperature id ="02" name="min">0</temperature>
    </month>
.......
  </city>
.......
</root>
图4-12 温度XML表

（2）天气模拟
如图4-13所示。天气的模拟是根据当前日期所在季节可能出现的天气，随机产生一个天气，以及该天气可能出现的天数，当前天气持续时间结束后，再次随机，为了防止同一种天气持续出现，设置每两次的随机结果不会一致，这样，就模拟了天气的产生。并根据不同的天气，设置了天气对温度的影响范围，从而模拟现实中天气对猪养殖的影响。

图4-13 天气模拟

（3）当天最高温度和最低温度的获取
从XML表中取出的数据算是当月月中的最高温度和最低温度，两月之间的温度取相应的平均数。考虑到每天的温度是有一些变化的，这里取一个浮点型的偏差temperaturePlus，这样的模拟，显得更为真实。
温度获取流程图如图4-14所示。

图4-14 当天最高温度和最低温度的获取

（4）计算具体时刻的温度
考虑到一天内的温差变化并不是那么均匀，因此，将一天从上班到下班之间的时间，划分了6个区间，分别设置不同的函数，从而计算出每天具体时刻的温度情况。如图4-15所示。
  void Update_GetTemperature_HalfHour()
    {
        if (Time_Singleton.Instance.Hour < 7)
        {
            temperature = minTemperature;
        }
        else if ........
    }
图4-15 计算具体时刻的温度

（5）室内温度
到此位置，计算的是最终室外温度，最终对种猪产生影响的当然还是室内温度。在不开空调的情况下，室内温度和室外温度相差无几，夏天会凉快一点，冬天会暖和一点。在开空调的情况下，室内温度会逐渐的趋向于设置的温度，同时产生相应的电费。

4.2.6 数据存储模块的实现
在数据的存储上，本项目采用的是本地化的存储方式，主要存储的数据包括：时间信息，天气信息，资产信息，种猪信息。对于这些数据过于庞杂，若要一个个单独的存储，会很乱。尤其在后期代码的修改，项目的优化过程中，往往会造成丢失和错乱。在这里采用序列化的存储方法，可以简单快捷的存储信息。
首先，为不同的信息设置对应的类，用以归类不同类型的信息，在保存场景的过程中，创建类所对应的对象。并将其序列化成字符串，保存到XML表中。当载入进度的时候，读取相应的进度信息，将其反序列化，最后按照读取的数据，将场景内对应的物体进行初始化。从而实现了游戏进度的读取操作。如图4-16所示。
   /// 数据对象序列化转换xml字符串
public static string SerializeObject(object pObject, Type ty)
    {
        MemoryStream memoryStream = new MemoryStream();
        XmlTextWriter xmlTextWriter = new XmlTextWriter(memoryStream, Encoding.UTF8);
        XmlSerializer xs = new XmlSerializer(ty);
        xs.Serialize(xmlTextWriter, pObject);

        memoryStream = (MemoryStream)xmlTextWriter.BaseStream;
        string XmlizedString = UTF8ByteArrayToString(memoryStream.ToArray());
        return XmlizedString;
    }
    /// xml字符串反序列化转换数据对象  
    public static object DeserializeObject(string pXmlizedString, Type ty)
    {
        XmlSerializer xs = new XmlSerializer(ty);
        MemoryStream memoryStream = new MemoryStream(StringToUTF8ByteArray(pXmlizedString));
        XmlTextWriter xmlTextWriter = new XmlTextWriter(memoryStream, Encoding.UTF8);
        return xs.Deserialize(memoryStream);
    }
    //UTF8字节数组转字符串  
    public static string UTF8ByteArrayToString(byte[] characters)
    {
        UTF8Encoding encoding = new UTF8Encoding();
        string constructedString = encoding.GetString(characters);
        return (constructedString);
    }
    //字符串转UTF8字节数组  
    public static byte[] StringToUTF8ByteArray(string pXmlString)
    {
        UTF8Encoding encoding = new UTF8Encoding();
        byte[] byteArray = encoding.GetBytes(pXmlString);
        return byteArray;
    }
图4-16 数据存储（序列化）

4.3 流程模块的实现
在知识点展示模块，很多知识的培训都是通过流程的方式来实现的。而对于知识点的流程展示，是一个可重复的过程，这就需要当一个知识点培训结束后，对该模块的数据及模型进行初始化处理。由于知识点的培训流程过长，用户误操作可能导致长时间的等待。因此需要添加“跳过”功能，快速结束本知识点的学习，这就需要在流程展示的过程中，每一模块都可以退出当前的流程并阻止后续流程的继续进行。
在设计流程展示模块之前，首先需要设置一个枚举类，来表明当前所在的流程属于什么流程，用以区分不同知识点模式下展示的不同的流程。如图4-17所示是需要展示的流程。

图4-17 流程模块

以调教流程模块为例，在进行调教流程的过程中，设置标志变量isStart。表示开始当前流程。processStep是步骤序号，当前的processStep序号即正在流行的操作序号。当进入到调教流程时，isStart会被置为True表示已经进入到了调教操作流程，此时Processindex变量序号为0，isStart变量被置为False，因为该流程是放在Updata函数中的，每帧都会执行，为了保证代码只执行一次，再进入每个步骤的第一行代码。都应将isStart置为False。Teach_Update_Process()函数是具体的戴手套动画播放的代码，包括角色的移动，角色动画的播放，以及摄像机的移动等等。每个动作播放结束时，会将Processindex++，进入到下一动作。当前步骤执行结束后，会将ProcessStep++并将Processindex置为0，进入到下一步骤。
当用户点击跳过时，会将processindex置为-1，调用 OverTeachProcess()函数。从而中断当前的过场动画效果，跳出流程，并将数据初始化StartTeachOrSemen(false) 。对于正在进行的动画或者即将进行的流程也必须要马上杀死，不然会造成程序的混乱。对此，流程在运行的过程中，都会将正在进行的动画或者流程保存进列表中，当跳出流程时，都会被停止或中断。
调教流程图如图4-18所示。

图4-18 调教操作流程


4.4 种猪AI系统
在种猪的日常的生活中，可能需要进行喝水、走动、排粪、睡觉等行动。在种猪受到外界刺激时，种猪可能会出现难受，兴奋等状态，这就需要在开发的过程中添加种猪的AI，来控制种猪的各种状态。
AI是一门复杂的科学，智能的AI需要进行机器学习等一些列的复杂操作，但是在本项目中，种猪的AI无须过于智能，种猪只需要应对系统中可能出现的状态即可。所以在这里，设计实现了一个种猪AI框架，用于应对种猪可能出现的状态，并且对于种猪日常状态的切换提供了一套完整的转换机制，从而实现对于种猪AI的控制。
首先区分种猪两大类状态：自身AI状态和受外界影响而产生的AI状态。两种状态的实现机制是不一样的，对于种猪的自身AI状态的切换，是由种猪自身的因素决定的，因此，这里设计实现了自身的转换机制，来随机模拟种猪自身AI状态的切换。如图4-19所示。

图4-19 猪自身AI状态切换

在种猪的日常AI状态的切换过程中，这里根据现实中种猪可能出现的状态以及种猪的日常生活规律，随机设置了种猪进行每种状态需要的时间。当该状态时间结束时，随机进入到下一操作，并且对于每种操作的时间和次数加以限制，从而避免了产生类似于饮水过多、排粪过多的不正常现象。通过这样的方法，就可以简单的实现种猪的日常AI状态的正常切换。如图4-20所示。

图4-20 下一状态的确定

对于某些因外界因素而对于种猪进行AI状态的影响，这里，需要判断切换的状态是属于自身AI状态还是外界AI状态。如果是自身AI状态，则正常切换，如果是外界AI状态的影响，则中断当前AI状态，停止其动画等表现形式，切换到外界AI状态，当外界AI状态的影响结束之后，再切换回自身的AI状态。
状态的切换的流程如图4-21所示。

图4-21 AI状态的切换

在每次进行AI状态的切换过程中，都需要对种猪就行初始化，即根据不同的状态，获取改状态第一帧需要做的事情、以及需要播放的场景动画，从而改变其外在表现形式，让用户能够直观的感受到，种猪改变了当前的状态，正在进行某种日常活动。
初始化猪的状态的逻辑实现关键代码如图4-22所示。
//根据不同状态，获取该状态第一帧需要做的事情
 public DelegateHandler GetInvokeStateChangeEvent(PigState targetState)
    {
        DelegateHandler handle = () => { };
        switch (targetState)
        {
            case PigState.Idle:
                handle = () => { Animator_Singleton.Instance.SetIdle_Pig(myAniamtor); };
                break;
            case PigState.Sleep:
                handle = () => { Animator_Singleton.Instance.SetSleep_Pig(myAniamtor); };
                break;
             .........
        }
        return handle;
    }
图4-22 初始化猪的状态
4.5 项目的优化
项目在实现的过程中，有部分的实现方式会影响系统的用户体验或者对系统的性能有所影响，因此项目的优化则显得相当重要。
（1）UI界面点击操作的优化
在UI的实现环节，需要响应用户的点击操作，但是在场景的设计过程中，场景内某些物体也需要响应用户的点击操作，而这样的话，想点击UI界面的时候就可能会触发界面下场景物体的交互。这就需要用户在点击UI界面时，屏蔽场景内物体对于点击操作的相应。因此在场景内物体响应点击操作之前，需要判断是否点击在UI界面上，如果不是点击在UI界面上时，才会响应点击操作。
（2）碰撞检测的优化
在虚拟猪养殖项目实现的过程中，用户所控制的饲养员需要与场景内的物体发生碰撞，这里的碰撞有两种：碰撞器和触发器。对于碰撞器来说，用户是无法穿过的，类似于墙壁的实现。对于触发器来说，用户在碰触到触发器时，会触发相应的某种操作，类似于开门等。
在项目中，即需要限制用户的行动范围以防止出现角色模型“穿墙”的现象，又需要允许用户进入到某些房间内进行观察。就需要在房间的门口设置触发器，当用户碰触到触发器时，响应操作，切换到房间内的场景，这里通过黑屏的方式，移动角色和摄像机到适当的位置，产生进入房间的操作。
（3）动画的优化
Unity3D播放模型动画的方式主要有两种：Animator和Animation。Animation和Animator 虽然都是控制动画的播放，但是它们的用法和相关语法都是大有不同的。Animation 控制一个动画的播放，而Animator是多个动画之间相互切换，并且Animator 有一个动画控制器，俗称动画状态机。Animator 利用它做动画的切换是很方便的，但是它有一个缺点就是占用内存比Animation大。
在本项目中，使用Animator状态机来控制动画的播放会使得角色动画的切换更加流畅，达到更好的虚拟仿真效果，让用户可以沉浸到虚拟仿真的世界中。
（4）摄像机的优化
摄像机拍摄到的画面是最终呈现在用户眼前的画面，而摄像机需要渲染的东西则由开发者所决定，而如果摄像机要渲染场景内所有的虚拟物体，这对软件的运行是极其不利的，每个人的电脑不同，部分电脑对于图形处理的运算量达不到预想的效果，这就需要对摄像机渲染的物体进行选择性的显示，对于一些远的看不清的物体，就不必去渲染其整个模型，可以在摄像机的一定距离外，显示该物体的“片”，即通过简单的图片来代替原来的物体。这就大大减少了摄像机的运算量，提升系统的运行效率，使用户在观察场景时，更加流畅。
（5）材质合并
场景内的物体很多材质都是相同的，如果单纯的将材质直接添加到场景中，就相当于场景需要渲染所有的物体，这将大大的降低系统的运行效率，场景内物体过多时，可能会出现卡顿的现象。所以需要将材质相同的物体进行材质的融合。以此达到性能提升。既然都能合并在一起，也就要求这些合并前的材质shader类型都要一样。对于场景内猪、栏杆等这些用到很多并且材质一致的物体都需要进行材质的融合，从而提高整个软件系统的运行效率。


4.6 本章小结
本章首先介绍了整体实现过程的流程，然后依次介绍了资源的导入、系统整体的通信框架、角色的创建和控制、流程模块的实现方式、时间系统的实现方式、UGUI的部分实现方式、数据存储的实现方式、以及种猪日常AI行为的实现方式。并在最后简单介绍了项目中一些对项目的优化措施。
在时间系统中详细介绍了具体实现过程、时间事件触发、时间加速的功能。在UGUI模块中分别介绍了事件系统的构建以及对于重叠问题的解决。在数据存储模块中，重点介绍了环境信息的获取和系统数据的存储方式。在系统项目优化模块中，分别介绍了UI界面点击操作的优化、碰撞检测的优化、动画的优化、摄像机的优化和材质合并。
由于篇幅的限制，本章摘取了项目中比较重要的实现环节，加以详细叙述。通过文字叙述辅以流程图或者部分关键代码的形式，将系统中主要的功能模块的实现形式以及实现方法加以描述。通过这些关键环节的描述，大致将系统的轮廓展示了出来。




第五章 系统测试与发布


5.1 系统的测试
（1）测试的目的
系统在开发完成之后，需要经过一系列的测试操作来检验系统是否存在影响系统运行的BUG，在系统发布之前，对系统进软件测试是开发项目必不可少的重要环节［31］。经过测试之后，可以确保系统的完整性、正确性和安全性，保障系统的质量。只有经过测试的系统才可以发布上线，没有经过测试的系统，往往会出现一些意想不到的错误，无法保证系统的质量，进而影响用户的体验，这对于用户，对于开发者来说都是非常不利的。
（2）功能模块测试
本系统在发布之前，需要检测各模块是否运行正常，用户是否会遇到意料之外的状况，因此我们需要对系统的各个功能模块进行测试［32］。
测试的第一步就应该测试确认系统是否完全实现了需求，即系统是否按照项目需求分析和设计的那样去实现，实现的项目与预期的效果是否相同。对于项目功能的测试就比较简单，只需要按照项目策划中的功能模块分解，对所有功能模块进行测试，以检测是否达标。测试的过程中，需要对各种正常和非正常的使用情况都加以测试，因为用户可能在不了解系统的情况下进行一系列的错误操作，为了让系统能正常的运行，一定要确保系统的健壮性。
（3）性能测试
对于系统性能的测试，往往会使用Unity3内置的Profiler性能分析工具所提供的系统性能表现的详细信息来对整个系统的性能进行分析。如果开打的系统存在性能问题，如低帧率或者高内存占用，性能分析工具可以帮助开发者发现问题的起因，并协助开发者解决问题［33］。Profiler面板如图5-1所示。
在窗口左侧，可以看到一列profilers，每个profiler显示系统的一个方面的信息，分别为cpu使用情况、gpu使用情况、渲染、内存使用情况、声音、物理和网络。当系统开始录制测试时，窗口上部的每个profiler会随着时间显示数据。性能是随着时间变化的，所以随着时间变化的信息是比仅仅一帧的信息有用的多的。有些性能问题是持续性的，有些问题是仅仅在一帧中出现的，还有一些性能问题是随着时间逐渐显现的。Profiler的下半部显示我们选择的当前profiler当前帧的详细信息。

图5-1 AIProfiler面板

另外，对于3D系统来说，渲染是非常耗时的一块，对于渲染的数据把控，对提升系统性能也是一个非常重要的步骤。在Unity3D中，Game视窗的Stats面板可以很方便的去查看渲染统计的信息。
Stats面板如图5-2所示。

图5-2 Stats面板

Stats面板的数据信息包括：
FPS
fps其实就是 frames per second,也就是每一秒系统执行的帧数，这个数值越小，说明系统越卡。
Batches（Draw Calls）
batching之后渲染mesh的数量，和当前渲染到的网格的材质球数量有关。
Saved by batching 
渲染的批处理数量，这是引擎将多个对象的绘制进行合并从而减少GPU的开销；很多插件的一个好处就是合并多个对象的渲染，从而降低DrawCalls ，保证系统帧数。
Tris 当前绘制的三角面数
Verts 当前绘制的顶点数
Screen 显存的使用情况，Screen 总大小取决于你的显卡的显存
Visible Skinned Meshes 蒙皮网格的渲染数量
Animations 播放动画的数量
（4）可用性检测
可用性测试是系统项目在没有发布上线之前，寻找一部分用户对系统进行试用，从而发现用户对于整个软件的体验情况［34］。用户在使用系统后，会从用户的角度出发，切身的提出系统的不足。
（5）测试结果
经过一些列的测试与修改完善，系统已经基本能达到预期的效果。所有功能模块可以正常运行，对于用户的错误操作，系统会给予错误的提示或者屏蔽此类操作。在性能方面，系统也基本能满足客户的需求。在可用性方面，增加了部分用户反馈的环节，并简化了操作复杂度，减少用户对于软件的学习成本。


5.2 系统的发布
系统项目在经过需求分析、设计、开发、测试之后，终于到了发布的阶段，Unity3D对于系统的发布是比较简单的。
点开File-Build Settings界面（图5-3），依次将开发好的场景按照顺序，拖至Scenes In Build窗口中。

图5-3 File-Build Settings界面

此时点击Build就可以将文件以exe格式的形式发布成可执行的程序。但是对于一个合格的软件而言，一定要设计项目的名称和图标。在Player Settings中（图5-4），可以在Company Name中输入公司名称，在Product Name中输入项目名称，在Default Icon中可以设置项目的图标。

图5-4 Player Settings


5.3 本章小结
本章简单的介绍了项目在开发结束之后对于项目的测试和发布环节。阐述了测试的目的以及对于不同的测试目的所采用不同的测试方法。简单介绍了项目发布的操作流程。



第六章总结与展望


6.1 总结
在虚拟现实日益发展的今天，虚拟培训对于培训方式和方法都是一个重大的突破，从传统的教学方式过渡到以计算机为载体的教学方式，很大程度上减少了教育资源的浪费，改善了过去培训工作中，耗时长、花费多、效率低、不全面的问题。为教育培训工作带来了一种崭新的形式。
本文以猪养殖为背景，现场考察现实中养殖场的场景、培训方式以及饲养流程，以Unity3D虚拟仿真平台为载体，分析、设计并实现了虚拟猪养殖系统。具体工作如下：
（1）分析了当前传统教育的不足，阐述了虚拟仿真技术在国内外的发展县长，总结了虚拟仿真技术对于培训教育工作的重要意义。并简单介绍了虚拟仿真相关技术。
（2）深入分析了虚拟仿真技术与培训教育工作结合的可能性，从培训教育理论到虚拟仿真平台，从根本上挖掘培训教育工作的本质，并结合虚拟仿真技术开发符合用户需求的系统。
（3）以现实中的猪养殖的操作流程为基础，提出需求分析，根据项目需求分析出整个系统所需要的功能和应该达到的效果，并确定整体的系统框架。根据系统框架中的内容设计项目细节，将项目系统按照功能的不同划分为不同的功能模块分别加以分析与设计，在具体细节没有实现时，对于可能出现的问题加以预期改良修改，并以此为基对虚拟猪养殖系统进行构建实现。
（4）在项目的设计实现过程中主要做了以下工作：场景的搭建、逻辑的设计、实现方式的设计、各功能模块的分析设计、系统整体框架的搭建、各功能模块的实现、数据的存储、AI的设计与实现等等。以及在具体实现过程中对于细节的修改和完善。
（4）在项目大致框架设计完成时，对项目进行精雕细琢，根据项目需求对软件系统进行功能优化和性能优化。
（5）项目完成后，采用迭代的方式对于项目进行一系列的测试并修改。当项目达到预期效果之后，将其完成发布。



6.2 展望
本系统是以传统的猪养殖饲养员的培训教育为基础，结合Unity3D设计实现而成虚拟猪养殖系统。但是在实现过程中还是有些遗憾，本系统还有很多方面需要继续研究和改进：
（1）多人协作模式。本系统采用的是单人的操作模式，是玩家操作饲养员进行虚拟仿真。但是在某些需求中，是需要多人协作的。基于多人协作的虚拟仿真，会很大程度上的增加用户的交互性、培训的趣味性。多人协作下的虚拟仿真也是一个很好的研究方向。
（2）交互模式。随着VR/AR技术的不断发展，人们已经不满足于基于PC端的虚拟仿真。基于PC端的虚拟仿真与理想中的虚拟仿真还是有一定差距的，用户的沉浸程度不够，用户与系统的交互模式仍然是鼠标和键盘。如果能结合VR/AR中的虚拟设备，是否是一种更好的实现培训教育的方式。




参考文献

［1］栾飞.基于Unity3D的液压传动虚拟仿真教学系统开发.山东建筑大学2015.
［2］G. Buyuksalih,S. Bayburt,A. P. Baskaraca,H. Karim,A. Abdul Rahman. CALCULATING SOLAR ENERGY POTENTIAL OF BUILDINGS AND VISUALIZATION WITHIN UNITY 3D GAME ENGINE[J]. ISPRS - International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences,2017,XLII-4/W5.
［3］Mohd Hafiz Mahayudin,Ruzinoor Che Mat. Online 3D terrain visualisation using Unity 3D game engine: A comparison of different contour intervals terrain data draped with UAV images[J]. IOP Conference Series: Earth and Environmental Science,2016,37(1).
［4］孙本固. 虚拟装配中控制与交互的关键技术研究[D].湖北工业大学.2016
［5］许微.虚拟现实技术的国内外研究与现状.现代商贸工业,2009(2). 
［6］Deborah Richards,Meredith Taylor. A Comparison of learning gains when using a 2D simulation tool versus a 3D virtual world: An experiment to find the right representation involving the Marginal Value Theorem[J]. Computers & Education,2015,86.
［7］翟雅芳. 基于Kinect的交互式教学技术与系统研究[D].郑州大学,2017.
［8］蒋逸皇. 基于体感交互的教育游戏的设计与开发[D].江西科技师范大学,2015.
［9］赵沁平. 虚拟现实综述[J].中国科学（F辑:信息科学）. 2009(01)
［10］Greg Sutton,Karen Newberry,Kate Threapleton. Evaluating Unity created teaching simulations within occupational therapy[J]. Journal of Assistive Technologies,2016,10(3).
［11］Sha Liang. Design and Implementation of Virtual Roaming Based on Unity3D[J]. Advanced Materials Research,2015,3716(1079).
［12］羊玢,宋化卫,王玉,江志鹏,王哲.液压挖掘机三维虚拟实验设备的设计与开发[J].机械制造与自动化.2014(02)
［13］Xin Xin Feng,Jia Bao Zhao,Rong Zhen Cui. Applicability of Virtual Reality in the Study of Environmental Stress[J]. Applied Mechanics and Materials,2015,3844(741).
［14］Taher M., El-Ghazawi T.. Virtual configuration management: A technique for partial runtime reconfiguration[J]. IEEE Transactions on Computers, 2009, 58(10).
［15］曾勇.基于Unity3d的挖掘机模拟训练系统研究[D].长安大学,2013
［16］冯强.虚拟场景三维显示实现平台研究［D］北京：北京邮电大学，2015．
［17］陈怀友,张天驰,张菁.虚拟现实技术［M］.北京：清华大学出版社，2012
［18］Kun Jiang,Fu Yan Zheng,Hai Kun Teng. The Design of Three-Dimensional Computer Room Monitoring System Based on Unity3D[J]. Applied Mechanics and Materials,2014,3365(602).
［19］Zhang Cheng,He Dan. Virtual Campus Based on Unity3D[J]. Advanced Materials Research,2014,3593(1049).
［20］张光贺. 基于Unity3D引擎在虚拟培训系统的应用研究[D].武汉纺织大学,2017.
［21］毕成. 基于Unity3D的XXX特种车辆的虚拟培训系统的设计与实现[D].大连海事大学,2017.
［22］申蔚.虚拟现实技术.北京:清华大学出版社,2009 
［23］刘骏尧. 基于Unity3D的策略养成类游戏设计与实现[D].吉林大学,2017.
［24］胡子洋. 基于Unity引擎的腾讯桌球客户端的设计与实现[D].哈尔滨工业大学,2016.
［25］ Wang Sen,Mao Zilong,Zeng Cunhua,et al.A new method of virtual reality based on Unity3D. Geoinformatics,2010 18thInternational Conference . 2010．
［26］张可超.船舶压缩空气系统虚拟现实的设计与研究[D].大连海事大学 2014
［27］李庆岗,吴义景,钱坤,杨勇. 圩猪体重非线性生长曲线拟合分析[J]. 养猪,2017(06):52-55.［28］刘建,李静如,朱吉,彭英林,谭建坤,吴承武,杨仕柳,张彬. 运用函数模型拟合湘村黑猪生长曲线的探讨[J]. 养猪,2014(03):75-76.
［29］吴景. 基于Unity3D的虚拟实验系统的设计[D].广东工业大学,2015.
［30］索金涛. 基于虚拟现实技术的高校消防安全教育系统设计与实现[D].华中师范大学,2017.
［31］乔毛毛. 基于Unity3D的虚拟仿真训练系统的设计与实现[D].西安电子科技大学,2014.
［32］Minocha S.Developing a 3D virtual geology field trip in Unity 3D:reflection of our experiences[J].2014
［33］于胜男. Unity结合Kinect三维互动体感游戏设计与开发[D].北京林业大学,2016.
［34］倪萌.基于Unity3D的汽车发动机虚拟装配训练考评系统的设计与实现[D]. 北京工业大学 2014


攻读学位期间主要的研究成果

［1］张古泰,朱文球,张潇云. 基于Unity3D的虚拟实验室仿真[J]. 信息与电脑(理论版),2017,(03):30-32+41.






致谢

时光荏苒，三年的学习时光转眼就过去了，我的研究生生涯也已经接近尾声。三年来的学习经历，不仅提升了我的专业能力，更使得我的社交能力、学习和解决问题的能力得到了飞速的提升。在此，我要向我那些帮助过我的人表示最真挚的谢意。
首先我要感谢我的导师朱文球教授和张潇云导师对我的悉心指导和培养，本文也是在两位老师的耐心指导和审阅下完成的。导师们认真负责，从论文的选题、资料的收集、项目的开发、文章的审阅上，都特别用心，给我提出了很多宝贵的意见，使我不至于迷失自己的方向，最终顺利的将项目完成。在此，我要向两位导师致以衷心的感谢和深深的敬意！
同时，我还要感谢那些在读研期间帮助过我的老师和同学们，谢谢你们的陪伴和帮助。感谢那些在项目中帮助过的人，感谢提供技术支持的UI组和模型组的同学们。
最后，我还要感谢我的父母和家人，感谢所有关心我、帮助过我的人。谢谢你们！